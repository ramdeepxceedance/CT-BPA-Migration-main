{
	"name": "df_source_policy_risk_emp",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_propertyUnits",
						"type": "DatasetReference"
					},
					"name": "PropertyUnits"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "stgPolicy"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRisk",
						"type": "DatasetReference"
					},
					"name": "riskStaging"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRisk",
						"type": "DatasetReference"
					},
					"name": "PolRisk"
				},
				{
					"name": "maxId"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "stgPolicySelect"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string,",
				"     policies as string[]",
				"}",
				"source(output(",
				"          PolicyPrefix as string,",
				"          Policy as string,",
				"          Policy_Sequence as string,",
				"          RowStatus as string,",
				"          EffectiveDate as timestamp,",
				"          ExpirationDate as timestamp,",
				"          LocationNumber as string,",
				"          LocationUnitNumber as string,",
				"          {UnitType/ModificationType} as string,",
				"          YearBuild as short,",
				"          UnitValue as decimal(13,0),",
				"          SquareFootage as integer,",
				"          RiskUseCode as string,",
				"          Occupancy as string,",
				"          RoofTypeCode as string,",
				"          RoofYear as short,",
				"          Make as string,",
				"          Model as string,",
				"          SerialNumber as string,",
				"          UnitWidth as short,",
				"          RiskType as string,",
				"          UnitLength as short,",
				"          PurchasePrice as decimal(9,0),",
				"          PurchaseDate as timestamp,",
				"          NewUsed as string,",
				"          ProtectionClass as string,",
				"          NumberOfSections as decimal(1,0),",
				"          AppraisalYear as short,",
				"          AppraisedValue as decimal(9,0),",
				"          ConstructionTypeCode as string,",
				"          ParkCode as string,",
				"          OrdinanceLawPercent as decimal(5,2),",
				"          PropertyLossScore as string,",
				"          ProtectedRiskFlag as string,",
				"          PreferredRiskFlag as string,",
				"          ReplaceOrFullRepair as string,",
				"          MineSubsidenceFlag as string,",
				"          NumberOfStories as decimal(3,0),",
				"          InZoneFlag as string,",
				"          BasicFlag as string,",
				"          DwellingUnits as string,",
				"          ElectricSystemTypeCode as string,",
				"          PlumbingSystemTypeCode as string,",
				"          ExtentOfRoofUpdateCode as string,",
				"          ElectricSystemYear as short,",
				"          ExtentOfElectricSystemUpdate as string,",
				"          PlumbingSystemYear as short,",
				"          ExtentOfPlumbingSystemUpdate as string,",
				"          HeatingSystemYear as short,",
				"          ExtentOfHeatingSystemUpdate as string,",
				"          MilesToFireDepartmentCode as string,",
				"          FeetToHydrantCode as string,",
				"          UnitDescription as string,",
				"          InflationGuardPercent as decimal(6,3),",
				"          NumberOfHouseholds as short,",
				"          AnimalUseCode as string,",
				"          AnimalOtherUse as string,",
				"          LeaseFlag as string,",
				"          ID as integer,",
				"          DataSource as string,",
				"          FirelineScore as string,",
				"          FirelineStatus as string,",
				"          FirelineDate as timestamp,",
				"          AnimalDOB as timestamp,",
				"          AnimalName as string,",
				"          AnimalBreed as string,",
				"          AnimalBreedOtherDescription as string,",
				"          AnimalSireName as string,",
				"          AnimalDamName as string,",
				"          AnimalSex as string,",
				"          DW_InsertDate as date,",
				"          CoveragePart as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[PolicyPropertyUnit_P]  where TRIM(AnimalUseCode) != '?' and TRIM(RowStatus) != 'D' and (TRIM(AnimalBreed) != '' or TRIM(AnimalUseCode) != '') and PolicyPrefix='{$policyPrefix}'\"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> PropertyUnits",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgPolicy",
				"source(output(",
				"          riskid as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select isNull(MAX(RISK_ID),0) as riskid from POL_RISK',",
				"     format: 'query') ~> riskStaging",
				"derivedColumn6 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet1@(output1)",
				"stgPolicy select(mapColumn(",
				"          POLICY_ID,",
				"          POLICY_VID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> stgPolicySelect",
				"surrogateKey1 derive(RISK_ID = skey + maxId#outputs()[1].riskid,",
				"          RISK_VID = 1,",
				"          POLICY_ID = POLICY_ID,",
				"          RISK_IS_ACTIVE_YN = \"Y\",",
				"          RISK_EFF_DATE = EffectiveDate,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_EXP_DATE = ExpirationDate,",
				"          POLICY_OVID = POLICY_VID,",
				"          RISK_CODE = RiskUseCode,",
				"          RISK_NUMBER = concat(LocationNumber,'-',LocationUnitNumber)) ~> derivedColumn6",
				"join1 keyGenerate(output(skey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"PropertyUnits, stgPolicy join(Policy == POLICY_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_NUMBER as string,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          RISK_IS_ACTIVE_YN as string,",
				"          RISK_EFF_DATE as timestamp,",
				"          RISK_EXP_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PolRisk",
				"riskStaging sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> maxId"
			]
		}
	}
}
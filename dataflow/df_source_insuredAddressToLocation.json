{
	"name": "df_source_insuredAddressToLocation",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_insuredAddress",
						"type": "DatasetReference"
					},
					"name": "insuredAddressSource"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "policyStaging"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_genAddress",
						"type": "DatasetReference"
					},
					"name": "genAddressStaging"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_insured_location",
						"type": "DatasetReference"
					},
					"name": "insuredLocationStagingMaxId"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_insured_location",
						"type": "DatasetReference"
					},
					"name": "insuredLocationStaging"
				},
				{
					"name": "maxIdCache"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select4"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string,",
				"     policies as string[]",
				"}",
				"source(output(",
				"          Policy as string,",
				"          Policy_Sequence as string,",
				"          PolicyPrefix as string,",
				"          ProductCode as string,",
				"          EffectiveDate as timestamp,",
				"          ExpirationDate as timestamp,",
				"          InsuredName as string,",
				"          InsuredAddress1 as string,",
				"          InsuredAddress2 as string,",
				"          InsuredAddress3 as string,",
				"          InsuredCity as string,",
				"          InsuredState as string,",
				"          InsuredZipCode as string,",
				"          InsuredTelephone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[Insured_Address] where PolicyPrefix = '{$policyPrefix}'\" +iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> insuredAddressSource",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[POL_POLICY] where ENTITY_TYPE ='{$policyPrefix}'\" +iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy_number in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> policyStaging",
				"source(output(",
				"          GEN_ADDRESS_UNIQ_ID as long,",
				"          ADDRESS_STREET1 as string,",
				"          ADDRESS_STREET2 as string,",
				"          COUNTY_CODE as string,",
				"          COUNTY as string,",
				"          ADDRESS_CITY as string,",
				"          ADD_DESCRIPTION as string,",
				"          STATE_PROVINCE_CODE as string,",
				"          POSTAL_CODE as string,",
				"          POSTAL_CODE_EXT as string,",
				"          COUNTRY_CODE as string,",
				"          SOURCE_INSERTED_ON as timestamp,",
				"          SOURCE_UPDATED_ON as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary,",
				"          TERRITORY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> genAddressStaging",
				"source(output(",
				"          maxId as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT isnull(MAX(LOCATION_ID), 0) as maxId\\nFROM dbo.POL_INSURED_LOCATION',",
				"     format: 'query') ~> insuredLocationStagingMaxId",
				"derivedColumn2 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet1@(output1)",
				"select1, select2 join(Policy == POLICY_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(source_key_exp = concatWS('', iif(isNull(ADDRESS_STREET1), '', replace(ADDRESS_STREET1, ' ', '')), iif(isNull(ADDRESS_STREET2), '', replace(ADDRESS_STREET2, ' ', '')), iif(isNull(ADDRESS_CITY), '', replace(ADDRESS_CITY, ' ', '')) , iif(isNull(POSTAL_CODE), '', replace(POSTAL_CODE, ' ', '')))) ~> derivedColumn1",
				"derivedColumn1, select3 join(source_key_exp == SOURCE_KEY,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"surrogateKey1 derive(LOCATION_ID = skey + maxIdCache#outputs()[1].maxId,",
				"          LOCATION_VID = 1,",
				"          LOCATION_IS_ACTIVE_YN = \"Y\",",
				"          LOCATION_EFF_DATE = currentTimestamp(),",
				"          LOCATION_EXP_DATE = toTimestamp(\"9999-01-01 00:00:00\")) ~> derivedColumn2",
				"insuredAddressSource select(mapColumn(",
				"          Policy,",
				"          ADDRESS_STREET1 = InsuredAddress1,",
				"          ADDRESS_STREET2 = InsuredAddress2,",
				"          ADDRESS_CITY = InsuredCity,",
				"          POSTAL_CODE = InsuredZipCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"policyStaging select(mapColumn(",
				"          POLICY_ID,",
				"          POLICY_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"genAddressStaging select(mapColumn(",
				"          GEN_ADDRESS_UNIQ_ID,",
				"          SOURCE_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select4 keyGenerate(output(skey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"join2 select(mapColumn(",
				"          POLICY_ID,",
				"          GEN_ADDRESS_UNIQ_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LOCATION_ID as long,",
				"          LOCATION_VID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          LOCATION_IS_ACTIVE_YN as string,",
				"          LOCATION_EFF_DATE as timestamp,",
				"          LOCATION_EXP_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          IS_PRIMARY_LOCATION_YN as string,",
				"          IS_FALSE_ADDRESS as string,",
				"          PROTECTION_CLASS as string,",
				"          FIRE_DISTRICT_NAME as string,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          GEN_ADDRESS_UNIQ_ID as long,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> insuredLocationStaging",
				"insuredLocationStagingMaxId sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> maxIdCache"
			]
		}
	}
}
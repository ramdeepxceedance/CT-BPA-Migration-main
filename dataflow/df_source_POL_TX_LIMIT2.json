{
	"name": "df_source_POL_TX_LIMIT2",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_txnBridge",
						"type": "DatasetReference"
					},
					"name": "StagingTxnBridge"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_polTxn",
						"type": "DatasetReference"
					},
					"name": "stgPolTxn"
				},
				{
					"dataset": {
						"referenceName": "ds_source_Fact_Coverage_Premium",
						"type": "DatasetReference"
					},
					"name": "fcp"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "polPolicy"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_locationRiskBridge",
						"type": "DatasetReference"
					},
					"name": "risklocationBridge"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_POL_TX_LIMIT_DED_OPT",
						"type": "DatasetReference"
					},
					"name": "PolTxLimitDedOptLimit2"
				}
			],
			"transformations": [
				{
					"name": "flowlet3",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "limit1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "lookup3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select3"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select4"
				},
				{
					"name": "lookup4"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string",
				"}",
				"source(output(",
				"          TX_BRIDGE_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          TX_ID as long,",
				"          SECTION_ID as long,",
				"          SECTION_VID as long,",
				"          RISK_ID as long,",
				"          RISK_OVID as long,",
				"          CLASSIFICATION_ID as long,",
				"          CLASSIFICATION_OVID as long,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string,",
				"          COVERAGE_ID as long,",
				"          COVERAGE_VID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingTxnBridge",
				"source(output(",
				"          TX_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          TX_CODE as string,",
				"          SUB_ACTIVITY as string,",
				"          ENDORSEMENT_SEQ_NO as integer,",
				"          IS_SYSTEM_GENERATED_YN as string,",
				"          ENDORSEMENT_CHANGES as string,",
				"          TRANSACTION_EFFECTIVE_DATE as timestamp,",
				"          TRANSACTION_EXPIRY_DATE as timestamp,",
				"          TRANSACTION_BOOK_FLAG_DATE as timestamp,",
				"          PARENT_TRANSACTION_ID as integer,",
				"          TRANSACTION_TYPE_CODE as string,",
				"          TYPE_OF_CHANGE as string,",
				"          TRANSACTION_CREATED_DATE as timestamp,",
				"          TRANSACTION_MODIFIED_DATE as timestamp,",
				"          TRANSACTION_DISPLAY_NAME as string,",
				"          TRANSACTION_PERIOD_PRORATION as decimal(19,9),",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgPolTxn",
				"source(output(",
				"          Policy as string,",
				"          Policy_Sequence as string,",
				"          PolicyPrefix as string,",
				"          ARICLOB as string,",
				"          ARICGroupCode as string,",
				"          Description as string,",
				"          Product as string,",
				"          ARICCoverageCode as string,",
				"          ARICCoverageDescription as string,",
				"          PrimaryPremiumStateCode as string,",
				"          LocationNumber as string,",
				"          LocationUnitNumber as string,",
				"          ARICCoverageSequence as integer,",
				"          CoveragePart as string,",
				"          CoverageAddDate as timestamp,",
				"          CoverageDescription as string,",
				"          Limit1 as decimal(38,0),",
				"          Limit2 as decimal(38,0),",
				"          PremiumAmount as decimal(38,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from Fact_Coverage_Premium where PolicyPrefix='{$policyPrefix}'\"),",
				"     format: 'query') ~> fcp",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from POL_POLICY',",
				"     format: 'query') ~> polPolicy",
				"source(output(",
				"          LOCATION_ID as long,",
				"          LOCATION_OVID as long,",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> risklocationBridge",
				"derivedColumn4 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet3@(output1)",
				"lookup4 derive(TX_ID = TX_ID,",
				"          RISK_ID = select1@RISK_ID,",
				"          TX_BRIDGE_ID = TX_BRIDGE_ID,",
				"          RISK_OVID = RISK_OVID,",
				"          POLICY_ID = POLICY_ID,",
				"          POLICY_OVID = POLICY_OVID,",
				"          COVERAGE_ID = COVERAGE_ID,",
				"          COVERAGE_OVID = COVERAGE_VID) ~> limit1",
				"select1, fcp lookup(select1@Policy_Sequence == fcp@Policy_Sequence",
				"     && select1@LocationNumber == fcp@LocationNumber",
				"     && select1@LocationUnitNumber == fcp@LocationUnitNumber",
				"     && select1@PrimaryPremiumStateCode == fcp@PrimaryPremiumStateCode",
				"     && select1@ARICLOB == fcp@ARICLOB",
				"     && select1@ARICCoverageCode == fcp@ARICCoverageCode",
				"     && select1@ARICCoverageSequence == toString(fcp@ARICCoverageSequence)",
				"     && select1@ARICGroupCode == fcp@ARICGroupCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"join1, polPolicy lookup(StagingTxnBridge@POLICY_ID == polPolicy@POLICY_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup3",
				"lookup3 derive(Policy_Sequence = split(TX_CODE,'-')[1],",
				"          LocationNumber = split(TX_CODE,'-')[2],",
				"          LocationUnitNumber = split(TX_CODE,'-')[3],",
				"          ARICGroupCode = split(TX_CODE,'-')[4],",
				"          PrimaryPremiumStateCode = split(TX_CODE,'-')[5],",
				"          ARICLOB = split(TX_CODE,'-')[6],",
				"          ARICCoverageCode = split(TX_CODE,'-')[7],",
				"          ARICCoverageSequence = split(TX_CODE,'-')[8]) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          TX_BRIDGE_ID,",
				"          POLICY_ID = StagingTxnBridge@POLICY_ID,",
				"          POLICY_OVID = StagingTxnBridge@POLICY_OVID,",
				"          TX_ID = StagingTxnBridge@TX_ID,",
				"          SECTION_ID,",
				"          SECTION_VID,",
				"          RISK_ID,",
				"          RISK_OVID,",
				"          COVERAGE_ID,",
				"          COVERAGE_VID,",
				"          TX_ID = stgPolTxn@TX_ID,",
				"          POLICY_ID = stgPolTxn@POLICY_ID,",
				"          POLICY_OVID = stgPolTxn@POLICY_OVID,",
				"          TX_CODE,",
				"          TRANSACTION_TYPE_CODE,",
				"          TYPE_OF_CHANGE,",
				"          POLICY_ID = polPolicy@POLICY_ID,",
				"          POLICY_VID,",
				"          POLICY_NUMBER,",
				"          Policy_Sequence,",
				"          LocationNumber,",
				"          LocationUnitNumber,",
				"          ARICGroupCode,",
				"          PrimaryPremiumStateCode,",
				"          ARICLOB,",
				"          ARICCoverageCode,",
				"          ARICCoverageSequence",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"fcp select(mapColumn(",
				"          Policy,",
				"          Policy_Sequence,",
				"          ARICLOB,",
				"          ARICGroupCode,",
				"          ARICCoverageCode,",
				"          ARICCoverageDescription,",
				"          PrimaryPremiumStateCode,",
				"          LocationNumber,",
				"          LocationUnitNumber,",
				"          ARICCoverageSequence,",
				"          CoverageDescription,",
				"          Limit1,",
				"          Limit2,",
				"          PremiumAmount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"surrogateKey1 derive(LIMIT_DED_OPT_TYPE_ID = 4,",
				"          LDO_CODE = 'Limit2',",
				"          LDO_VALUE = Limit2,",
				"          LDO_FLAG = '') ~> derivedColumn4",
				"select3 keyGenerate(output(TX_LIMIT_DED_OPT_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"limit1 select(mapColumn(",
				"          TX_BRIDGE_ID,",
				"          POLICY_ID,",
				"          POLICY_OVID,",
				"          TX_ID,",
				"          SECTION_ID,",
				"          SECTION_VID,",
				"          RISK_ID,",
				"          RISK_OVID,",
				"          COVERAGE_ID,",
				"          COVERAGE_VID,",
				"          TX_CODE,",
				"          TRANSACTION_TYPE_CODE,",
				"          TYPE_OF_CHANGE,",
				"          POLICY_VID,",
				"          POLICY_NUMBER,",
				"          Policy,",
				"          PolicyPrefix,",
				"          Description,",
				"          Product,",
				"          ARICCoverageDescription,",
				"          Limit1,",
				"          Limit2,",
				"          PremiumAmount,",
				"          COVERAGE_OVID,",
				"          LOCATION_ID,",
				"          LOCATION_OVID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"lookup2 filter(!isNull(Policy)) ~> filter1",
				"risklocationBridge select(mapColumn(",
				"          LOCATION_ID,",
				"          LOCATION_OVID,",
				"          RISK_ID,",
				"          RISK_VID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"filter1, risklocationBridge lookup(select1@RISK_ID == risklocationBridge@RISK_ID",
				"     && RISK_OVID == RISK_VID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup4",
				"StagingTxnBridge, stgPolTxn join(StagingTxnBridge@TX_ID == stgPolTxn@TX_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"flowlet3@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          TX_LIMIT_DED_OPT_ID as long,",
				"          TX_ID as long,",
				"          LOCATION_ID as long,",
				"          LOCATION_OVID as long,",
				"          SECTION_ID as long,",
				"          SECTION_OVID as long,",
				"          TX_BRIDGE_ID as long,",
				"          RISK_ID as long,",
				"          RISK_OVID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          LIMIT_DED_OPT_TYPE_ID as long,",
				"          LDO_FLAG as string,",
				"          LDO_CODE as string,",
				"          LIMIT_OCCURRENCE_FLAG as string,",
				"          LDO_VALUE as long,",
				"          LDO_VALUE_CCY_CODE as string,",
				"          LDO_PERCENTAGE as decimal(6,4),",
				"          LDO_TEXT as string,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string,",
				"          COVERAGE_ID as long,",
				"          COVERAGE_OVID as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PolTxLimitDedOptLimit2"
			]
		}
	}
}
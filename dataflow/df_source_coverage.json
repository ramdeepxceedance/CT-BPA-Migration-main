{
	"name": "df_source_coverage",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_policyCoverage",
						"type": "DatasetReference"
					},
					"name": "policyCoverageSource"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "policyStaging"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_coverageCode",
						"type": "DatasetReference"
					},
					"name": "coverageCodeStaging"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_coverage",
						"type": "DatasetReference"
					},
					"name": "coverageStagingLookup"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_coverage",
						"type": "DatasetReference"
					},
					"name": "coverageStagingMaxId"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_coverage",
						"type": "DatasetReference"
					},
					"name": "coverageStaging"
				},
				{
					"name": "maxIdCache"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "policyJoin"
				},
				{
					"name": "select3"
				},
				{
					"name": "coverageCodeJoin"
				},
				{
					"name": "select4"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string,",
				"     policies as string[]",
				"}",
				"source(output(",
				"          Policy as string,",
				"          ARICCoverageDescription as string,",
				"          Cov_effective_Date as timestamp,",
				"          Cov_Expiry_Date as timestamp,",
				"          CoverageDescription as string,",
				"          ARICLOB as string,",
				"          ARICCOverageCode as string,",
				"          ARICCoverageSequence as integer,",
				"          ARICGroupCode as string,",
				"          PrimaryPremiumStateCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select distinct Policy, ARICCoverageDescription ,Cov_effective_Date, Cov_Expiry_Date, CoverageDescription, ARICLOB, ARICCOverageCode, ARICCoverageSequence, ARICGroupCode, PrimaryPremiumStateCode from [dbo].[Policy_Coverage] where PolicyPrefix = '{$policyPrefix}'\"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> policyCoverageSource",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> policyStaging",
				"source(output(",
				"          COVERAGE_CODE_ID as long,",
				"          COVERAGE_CODE as string,",
				"          COVERAGE_DESCRIPTION as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> coverageCodeStaging",
				"source(output(",
				"          COVERAGE_ID as long,",
				"          COVERAGE_VID as long,",
				"          COVERAGE_CODE_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          COV_STATE_ID as long,",
				"          COVERAGE_EFFECTIVE_DATE as timestamp,",
				"          COVERAGE_EXPIRATION_DATE as timestamp,",
				"          ASL_CODE as string,",
				"          ASSL_CODE as string,",
				"          ASL_CODE_GBL as string,",
				"          ASSL_CODE_GBL as string,",
				"          CLASSIFICATION_CODE_ID as long,",
				"          CLASSIFICATION_CODE_OVID as long,",
				"          COVERAGE_CODE as string,",
				"          RETROACTIVE_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> coverageStagingLookup",
				"source(output(",
				"          maxId as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT isnull(MAX(COVERAGE_ID), 0) as maxId\\nFROM dbo.POL_COVERAGE',",
				"     format: 'query') ~> coverageStagingMaxId",
				"derivedColumn1 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet1@(output1)",
				"policyCoverageSource select(mapColumn(",
				"          Policy,",
				"          ARICCoverageDescription,",
				"          COVERAGE_LINE = CoverageDescription,",
				"          COVERAGE_EFFECTIVE_DATE = Cov_effective_Date,",
				"          COVERAGE_EXPIRATION_DATE = Cov_Expiry_Date,",
				"          ARICLOB,",
				"          ARICCoverageCode = ARICCOverageCode,",
				"          ARICCoverageSequence,",
				"          ARICGroupCode,",
				"          PrimaryPremiumStateCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"policyStaging select(mapColumn(",
				"          POLICY_ID,",
				"          POLICY_OVID = POLICY_VID,",
				"          POLICY_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"exists1, select2 join(Policy == POLICY_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> policyJoin",
				"coverageCodeStaging select(mapColumn(",
				"          COVERAGE_CODE_ID,",
				"          COVERAGE_CODE,",
				"          COVERAGE_DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"policyJoin, select3 join(ARICCoverageDescription == COVERAGE_DESCRIPTION,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> coverageCodeJoin",
				"coverageCodeJoin select(mapColumn(",
				"          COVERAGE_EFFECTIVE_DATE,",
				"          COVERAGE_EXPIRATION_DATE,",
				"          POLICY_ID,",
				"          POLICY_OVID,",
				"          COVERAGE_CODE_ID,",
				"          ARICLOB,",
				"          ARICCoverageCode,",
				"          ARICCoverageSequence,",
				"          ARICGroupCode,",
				"          PrimaryPremiumStateCode,",
				"          Policy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 keyGenerate(output(skey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(COVERAGE_ID = skey + maxIdCache#outputs()[1].maxId,",
				"          COVERAGE_VID = 1,",
				"          COVERAGE_CODE = concatWS('-', iif(isNull(ARICGroupCode), '', replace(ARICGroupCode, ' ', '')), iif(isNull(PrimaryPremiumStateCode), '', replace(PrimaryPremiumStateCode, ' ', '')) , iif(isNull(ARICLOB), '', replace(ARICLOB, ' ', '')), iif(isNull(ARICCoverageCode), '', replace(ARICCoverageCode, ' ', '')), toString(ARICCoverageSequence)),",
				"          SOURCE_KEY = concatWS('', Policy, iif(isNull(ARICGroupCode), '', replace(ARICGroupCode, ' ', '')), iif(isNull(PrimaryPremiumStateCode), '', replace(PrimaryPremiumStateCode, ' ', '')) , iif(isNull(ARICLOB), '', replace(ARICLOB, ' ', '')), iif(isNull(ARICCoverageCode), '', replace(ARICCoverageCode, ' ', '')), toString(ARICCoverageSequence))) ~> derivedColumn1",
				"select1, coverageStagingLookup exists(concatWS('', Policy, iif(isNull(ARICGroupCode), '', replace(ARICGroupCode, ' ', '')), iif(isNull(PrimaryPremiumStateCode), '', replace(PrimaryPremiumStateCode, ' ', '')) , iif(isNull(ARICLOB), '', replace(ARICLOB, ' ', '')), iif(isNull(ARICCoverageCode), '', replace(ARICCoverageCode, ' ', '')), toString(ARICCoverageSequence)) == SOURCE_KEY,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COVERAGE_ID as long,",
				"          COVERAGE_VID as long,",
				"          COVERAGE_CODE_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          COV_STATE_ID as long,",
				"          COVERAGE_EFFECTIVE_DATE as timestamp,",
				"          COVERAGE_EXPIRATION_DATE as timestamp,",
				"          ASL_CODE as string,",
				"          ASSL_CODE as string,",
				"          ASL_CODE_GBL as string,",
				"          ASSL_CODE_GBL as string,",
				"          CLASSIFICATION_CODE_ID as long,",
				"          CLASSIFICATION_CODE_OVID as long,",
				"          COVERAGE_CODE as string,",
				"          RETROACTIVE_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coverageStaging",
				"coverageStagingMaxId sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> maxIdCache"
			]
		}
	}
}
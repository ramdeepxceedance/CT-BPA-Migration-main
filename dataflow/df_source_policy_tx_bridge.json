{
	"name": "df_source_policy_tx_bridge",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow/bridge"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_polTxn",
						"type": "DatasetReference"
					},
					"name": "polTxnStg"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_coverage",
						"type": "DatasetReference"
					},
					"name": "coverageStg"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRisk",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_polSection",
						"type": "DatasetReference"
					},
					"name": "polSection"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_txnBridge",
						"type": "DatasetReference"
					},
					"name": "txnBridgeStagingMaxId"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "stagingPolicy"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_txnBridge",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"name": "maxIdCache"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select3"
				},
				{
					"name": "lookup3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select4"
				},
				{
					"name": "select6"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string ('EMP'),",
				"     policies as string[] ([\"EMP009688\"])",
				"}",
				"source(output(",
				"          TX_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          TX_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT  distinct TX_ID,POLICY_ID,POLICY_OVID,TX_CODE FROM [DM_Source_Stage].[dbo].[POL_TX]  ',",
				"     format: 'query') ~> polTxnStg",
				"source(output(",
				"          COVERAGE_ID as long,",
				"          COVERAGE_VID as long,",
				"          COVERAGE_CODE_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          COV_STATE_ID as long,",
				"          COVERAGE_EFFECTIVE_DATE as timestamp,",
				"          COVERAGE_EXPIRATION_DATE as timestamp,",
				"          ASL_CODE as string,",
				"          ASSL_CODE as string,",
				"          ASL_CODE_GBL as string,",
				"          ASSL_CODE_GBL as string,",
				"          CLASSIFICATION_CODE_ID as long,",
				"          CLASSIFICATION_CODE_OVID as long,",
				"          COVERAGE_CODE as string,",
				"          RETROACTIVE_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from [dbo].[POL_COVERAGE] ',",
				"     format: 'query') ~> coverageStg",
				"source(output(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_NUMBER as string,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          RISK_IS_ACTIVE_YN as string,",
				"          RISK_EFF_DATE as timestamp,",
				"          RISK_EXP_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * FROM [DM_Source_Stage].[dbo].[POL_RISK] ',",
				"     format: 'query') ~> source1",
				"source(output(",
				"          SECTION_ID as long,",
				"          SECTION_VID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          COVERAGE_ID as long,",
				"          COVERAGE_OVID as long,",
				"          LOCATION_ID as long,",
				"          LOCATION_OVID as long,",
				"          LOB_ID as long,",
				"          SUB_LOB_ID as long,",
				"          RATE_SET_DATE as timestamp,",
				"          PRIMARY_POLICY_STATE as string,",
				"          BATCH_ID as long,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> polSection",
				"source(output(",
				"          maxId as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT isnull(MAX(TX_BRIDGE_ID), 0) as maxId\\nFROM dbo.POL_TX_BRIDGE',",
				"     format: 'query') ~> txnBridgeStagingMaxId",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[POL_POLICY] where ENTITY_TYPE ='{$policyPrefix}' \"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy_number in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> stagingPolicy",
				"derivedColumn2 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet1@(output1)",
				"join2 derive(POLICY_ID = select4@POLICY_ID,",
				"          POLICY_OVID = select4@POLICY_OVID,",
				"          COVERAGE_ID = COVERAGE_ID,",
				"          COVERAGE_VID = COVERAGE_VID) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          TX_ID,",
				"          POLICY_ID,",
				"          POLICY_OVID,",
				"          TX_CODE,",
				"          COVERAGE_VID,",
				"          COVERAGE_CODE,",
				"          COVERAGE_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, select2 lookup(select1@POLICY_ID == select2@POLICY_ID",
				"     && concat(split(TX_CODE,'-')[2],'-',split(TX_CODE,'-')[3]) == RISK_NUMBER,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"source1 select(mapColumn(",
				"          RISK_ID,",
				"          RISK_VID,",
				"          RISK_NUMBER,",
				"          POLICY_ID,",
				"          POLICY_OVID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select3 keyGenerate(output(skey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"lookup3 select(mapColumn(",
				"          TX_ID,",
				"          POLICY_ID = select1@POLICY_ID,",
				"          POLICY_OVID = select1@POLICY_OVID,",
				"          TX_CODE,",
				"          COVERAGE_VID,",
				"          COVERAGE_CODE,",
				"          COVERAGE_ID = select1@COVERAGE_ID,",
				"          RISK_ID,",
				"          RISK_OVID = RISK_VID,",
				"          RISK_NUMBER,",
				"          SECTION_ID,",
				"          SECTION_VID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"lookup2, polSection lookup(select1@POLICY_ID == polSection@POLICY_ID",
				"     && select1@COVERAGE_ID == polSection@COVERAGE_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup3",
				"surrogateKey1 derive(TX_BRIDGE_ID = skey + maxIdCache#outputs()[1].maxId) ~> derivedColumn2",
				"select4, select6 join(select4@POLICY_ID == select6@POLICY_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"polTxnStg, join1 join(polTxnStg@POLICY_ID == select4@POLICY_ID",
				"     && concat(split(TX_CODE,'-')[4],'-',split(TX_CODE,'-')[5],'-',split(TX_CODE,'-')[6],'-',split(TX_CODE,'-')[7],'-',split(TX_CODE,'-')[8]) == COVERAGE_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"coverageStg select(mapColumn(",
				"          COVERAGE_ID,",
				"          COVERAGE_VID,",
				"          COVERAGE_CODE_ID,",
				"          POLICY_ID,",
				"          POLICY_OVID,",
				"          COV_STATE_ID,",
				"          COVERAGE_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"stagingPolicy select(mapColumn(",
				"          POLICY_ID,",
				"          POLICY_VID,",
				"          POLICY_NUMBER,",
				"          ENTITY_TYPE,",
				"          ENTITY_STATUS,",
				"          REVISION_NUMBER,",
				"          POLICY_STATUS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          TX_BRIDGE_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          TX_ID as long,",
				"          SECTION_ID as long,",
				"          SECTION_VID as long,",
				"          RISK_ID as long,",
				"          RISK_OVID as long,",
				"          CLASSIFICATION_ID as long,",
				"          CLASSIFICATION_OVID as long,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string,",
				"          COVERAGE_ID as long,",
				"          COVERAGE_VID as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"txnBridgeStagingMaxId sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> maxIdCache"
			]
		}
	}
}
{
	"name": "df_source_policy_premium",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_txnBridge",
						"type": "DatasetReference"
					},
					"name": "StagingPolTxn"
				},
				{
					"dataset": {
						"referenceName": "ds_source_Fact_Coverage_Premium",
						"type": "DatasetReference"
					},
					"name": "FactCoveragePremium"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "StagingPolicy"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_polTxn",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_polTxnPremium",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "select2"
				},
				{
					"name": "lookup3"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string,",
				"     policies as string[]",
				"}",
				"source(output(",
				"          TX_BRIDGE_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          TX_ID as long,",
				"          SECTION_ID as long,",
				"          SECTION_VID as long,",
				"          RISK_ID as long,",
				"          RISK_OVID as long,",
				"          CLASSIFICATION_ID as long,",
				"          CLASSIFICATION_OVID as long,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string,",
				"          COVERAGE_ID as long,",
				"          COVERAGE_VID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingPolTxn",
				"source(output(",
				"          Policy as string,",
				"          Policy_Sequence as string,",
				"          PolicyPrefix as string,",
				"          ARICLOB as string,",
				"          ARICGroupCode as string,",
				"          Description as string,",
				"          Product as string,",
				"          ARICCoverageCode as string,",
				"          ARICCoverageDescription as string,",
				"          PrimaryPremiumStateCode as string,",
				"          LocationNumber as string,",
				"          LocationUnitNumber as string,",
				"          ARICCoverageSequence as integer,",
				"          CoveragePart as string,",
				"          CoverageAddDate as timestamp,",
				"          CoverageDescription as string,",
				"          Limit1 as decimal(38,0),",
				"          Limit2 as decimal(38,0),",
				"          PremiumAmount as decimal(38,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from Fact_Coverage_Premium where PolicyPrefix='{$policyPrefix}'\"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> FactCoveragePremium",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[POL_POLICY] where ENTITY_TYPE ='{$policyPrefix}' \"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy_number in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> StagingPolicy",
				"source(output(",
				"          TX_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          TX_CODE as string,",
				"          SUB_ACTIVITY as string,",
				"          ENDORSEMENT_SEQ_NO as integer,",
				"          IS_SYSTEM_GENERATED_YN as string,",
				"          ENDORSEMENT_CHANGES as string,",
				"          TRANSACTION_EFFECTIVE_DATE as timestamp,",
				"          TRANSACTION_EXPIRY_DATE as timestamp,",
				"          TRANSACTION_BOOK_FLAG_DATE as timestamp,",
				"          PARENT_TRANSACTION_ID as integer,",
				"          TRANSACTION_TYPE_CODE as string,",
				"          TYPE_OF_CHANGE as string,",
				"          TRANSACTION_CREATED_DATE as timestamp,",
				"          TRANSACTION_MODIFIED_DATE as timestamp,",
				"          TRANSACTION_DISPLAY_NAME as string,",
				"          TRANSACTION_PERIOD_PRORATION as decimal(19,9),",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"derivedColumn1 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet1@(output1)",
				"StagingPolicy select(mapColumn(",
				"          POLICY_ID,",
				"          POLICY_VID,",
				"          POLICY_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"lookup3, FactCoveragePremium lookup(POLICY_NUMBER == Policy",
				"     && TX_CODE == concat(Policy_Sequence,'-',LocationNumber,'-',LocationUnitNumber,'-',ARICGroupCode,'-',PrimaryPremiumStateCode,'-', ARICLOB,'-',ARICCoverageCode,'-',toString(ARICCoverageSequence)),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"source1 select(mapColumn(",
				"          TX_ID,",
				"          TX_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"join1, select2 lookup(StagingPolTxn@TX_ID == select2@TX_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup3",
				"lookup2 derive(TX_ID = StagingPolTxn@TX_ID,",
				"          TX_BRIDGE_ID = TX_BRIDGE_ID,",
				"          POLICY_ID = StagingPolTxn@POLICY_ID,",
				"          POLICY_OVID = POLICY_OVID,",
				"          FULL_POLICY_AMOUNT = PremiumAmount) ~> derivedColumn1",
				"StagingPolTxn, select1 join(StagingPolTxn@POLICY_ID == select1@POLICY_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AGENCY_ID as long,",
				"          AGENCY_VID as long,",
				"          AGENCY_GEN_ADDRESS_ID as long,",
				"          AGENCY_CODE as string,",
				"          AGENCY_NAME as string,",
				"          AGENCY_STATUS as string,",
				"          AGENCY_CATEGORY as string,",
				"          DIRECT_BILL_FLAG_YN as string,",
				"          TELEPHONE as string,",
				"          FAX as string,",
				"          EMAIL_ID as string,",
				"          WEBSITE as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_PARENT_ID as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}
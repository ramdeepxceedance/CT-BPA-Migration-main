{
	"name": "df_source_location_risk_bridege",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow/bridge"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_location",
						"type": "DatasetReference"
					},
					"name": "location"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "policy"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRisk",
						"type": "DatasetReference"
					},
					"name": "risk"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_locationRiskBridge",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_error_location_risk_bridge",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "polSelect"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "locationlookup"
				},
				{
					"name": "locationSelect"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policies as string[],",
				"     policyPrefix as string",
				"}",
				"source(output(",
				"          LOCATION_ID as long,",
				"          LOCATION_VID as long,",
				"          LOCATION_NAME as string,",
				"          LOCATION_NO as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          LOCATION_IS_ACTIVE_YN as string,",
				"          LOCATION_EFF_DATE as timestamp,",
				"          LOCATION_EXP_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          IS_PRIMARY_LOCATION_YN as string,",
				"          IS_FALSE_ADDRESS as string,",
				"          PROTECTION_CLASS as string,",
				"          FIRE_DISTRICT_NAME as string,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          GEN_ADDRESS_UNIQ_ID as long,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from [dbo].[POL_LOCATION] where LOCATION_NO is not null\\n',",
				"     format: 'query') ~> location",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[POL_POLICY] where ENTITY_TYPE ='{$policyPrefix}' \"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy_number in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> policy",
				"source(output(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_NUMBER as string,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          RISK_IS_ACTIVE_YN as string,",
				"          RISK_EFF_DATE as timestamp,",
				"          RISK_EXP_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from POL_RISK ',",
				"     format: 'query') ~> risk",
				"split1@goodRows compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet1@(output1)",
				"policy select(mapColumn(",
				"          POLICY_ID,",
				"          POLICY_VID,",
				"          POLICY_NUMBER,",
				"          ENTITY_TYPE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> polSelect",
				"join1 derive(POLICY_ID = polSelect@POLICY_ID,",
				"          POLICY_NUMBER = POLICY_NUMBER,",
				"          RISK_ID = RISK_ID,",
				"          LOCATIONNUMBER = split(RISK_NUMBER, '-')[1],",
				"          LOCATIONUNITNUMBER = split(RISK_NUMBER, '-')[2]) ~> derivedColumn1",
				"derivedColumn1, locationSelect lookup(derivedColumn1@POLICY_ID == locationSelect@POLICY_ID",
				"     && LOCATIONNUMBER == concat('00',toString(LOCATION_NO)),",
				"     multiple: false,",
				"     pickup: 'first',",
				"     asc(LOCATION_ID, true),",
				"     broadcast: 'auto')~> locationlookup",
				"location select(mapColumn(",
				"          LOCATION_ID,",
				"          LOCATION_VID,",
				"          LOCATION_NO,",
				"          POLICY_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> locationSelect",
				"locationlookup derive(LOCATION_ID = LOCATION_ID,",
				"          RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          LOCATION_OVID = LOCATION_VID) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          RISK_ID,",
				"          RISK_VID,",
				"          LOCATION_ID,",
				"          LOCATION_OVID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(!isNull(RISK_ID)&&!isNull(RISK_VID)&&!isNull(LOCATION_ID)&&!isNull(LOCATION_OVID),",
				"     disjoint: false) ~> split1@(goodRows, badRows)",
				"risk, polSelect join(risk@POLICY_ID == polSelect@POLICY_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LOCATION_ID as long,",
				"          LOCATION_OVID as long,",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'bpadocuments') ~> sink1",
				"split1@badRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}
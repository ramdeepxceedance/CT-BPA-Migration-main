{
	"name": "df_source_policy",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_policyCoverage",
						"type": "DatasetReference"
					},
					"name": "ecmPolicyCoverage"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_agency",
						"type": "DatasetReference"
					},
					"name": "polAgencyStg"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_agency",
						"type": "DatasetReference"
					},
					"name": "producerStg"
				},
				{
					"dataset": {
						"referenceName": "ds_ecm_state_code",
						"type": "DatasetReference"
					},
					"name": "stateCode"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "stgPolicyNextPkey"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "stgPolicy"
				},
				{
					"name": "stateCodeSink"
				},
				{
					"name": "policyPkeyCache"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "polAgencySrc"
				},
				{
					"name": "producerLookup"
				},
				{
					"name": "insuredLookUp"
				},
				{
					"name": "producerSelect"
				},
				{
					"name": "producerDerviedCol"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string (\"\"),",
				"     policies as string[] ([\"\"])",
				"}",
				"source(output(",
				"          Policy as string,",
				"          ARICLOB as string,",
				"          ARICGroupCode as string,",
				"          Description as string,",
				"          Product as string,",
				"          Occupancy as string,",
				"          ConstructionCode as string,",
				"          ConstructionYear as integer,",
				"          NumberOfFloors as integer,",
				"          ProtectionClass as string,",
				"          GEOLatitude as decimal(11,8),",
				"          GEOLongitude as decimal(11,8),",
				"          CauseOfLoss as string,",
				"          BCEGClassCode as string,",
				"          CoverageForm as string,",
				"          DesignatedPremisis as string,",
				"          WindIndicatorFlag as string,",
				"          PurchaseCost as decimal(8,2),",
				"          CoInsuranceBuilding as integer,",
				"          CoInsurancePersonalProperty as integer,",
				"          CoInsuranceBodilyInjury as integer,",
				"          ISOClassCode as string,",
				"          PolicyPrefix as string,",
				"          CancelDate as timestamp,",
				"          CancelReason as string,",
				"          CancelReasonDescription as string,",
				"          PolicyTermMonths as integer,",
				"          InsuredName as string,",
				"          InsuredAddress1 as string,",
				"          InsuredAddress2 as string,",
				"          InsuredCity as string,",
				"          InsuredState as string,",
				"          InsuredZipCode as string,",
				"          CompanyCode as string,",
				"          CompanyName as string,",
				"          GroupName as string,",
				"          GBLICompanyCode as string,",
				"          AgentCode as string,",
				"          AgentName as string,",
				"          AgentOffice as string,",
				"          GroupCode as string,",
				"          AgentCity as string,",
				"          EMail as string,",
				"          AgentPhone as string,",
				"          AgentCounty as string,",
				"          AgentZipCode as string,",
				"          AgentAddress1 as string,",
				"          AgentAddress2 as string,",
				"          AgentState as string,",
				"          SubProducerNumber as string,",
				"          SubProducerCode as string,",
				"          SubProducerName as string,",
				"          SubproducerState as string,",
				"          SubProducerType as string,",
				"          ProductCode as string,",
				"          ProductCodeDescription as string,",
				"          PreviousPolicy as string,",
				"          OriginalPolicyYear as integer,",
				"          NonRenewalReason as string,",
				"          NonRenewalNoticeDate as timestamp,",
				"          DatabaseCode as string,",
				"          MasterPolicy as string,",
				"          BillingType as string,",
				"          RowStatus as string,",
				"          OriginalInceptionDate as timestamp,",
				"          MultiplePolicyFlag as string,",
				"          ARICBusinessUnit as string,",
				"          HonorCurrentRateFlag as string,",
				"          FarmType as string,",
				"          PrimaryPremiumStateCode as string,",
				"          StateName as string,",
				"          BillingSystem as string,",
				"          ExperienceModFactor as decimal(7,4),",
				"          Exposure as decimal(8,0),",
				"          TaxFeeSurchargeFlag as string,",
				"          Rate as decimal(12,6)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"SELECT distinct [Policy]  ,[ARICLOB] ,[ARICGroupCode] ,[Description] ,[Product] ,[Occupancy] ,[ConstructionCode] ,[ConstructionYear] ,[NumberOfFloors] ,[ProtectionClass] ,[GEOLatitude] ,[GEOLongitude] ,[CauseOfLoss] ,[BCEGClassCode] ,[CoverageForm] ,[DesignatedPremisis] ,[WindIndicatorFlag] ,[PurchaseCost] ,[CoInsuranceBuilding] ,[CoInsurancePersonalProperty] ,[CoInsuranceBodilyInjury], [ISOClassCode] ,[PolicyPrefix]  ,[CancelDate] ,[CancelReason] ,[CancelReasonDescription] ,[PolicyTermMonths] ,[InsuredName] ,[InsuredAddress1] ,[InsuredAddress2] ,[InsuredCity] ,[InsuredState] ,[InsuredZipCode] ,[CompanyCode] ,[CompanyName] ,[GroupName] ,[GBLICompanyCode] ,[AgentCode] ,[AgentName] ,[AgentOffice] ,[GroupCode] ,[AgentCity] ,[EMail] ,[AgentPhone] ,[AgentCounty] ,[AgentZipCode] ,[AgentAddress1] ,[AgentAddress2] ,[AgentState] ,[SubProducerNumber] ,[SubProducerCode] ,[SubProducerName] ,[SubproducerState] ,[SubProducerType] ,[ProductCode] ,[ProductCodeDescription] ,[PreviousPolicy] ,[OriginalPolicyYear] ,[NonRenewalReason] ,[NonRenewalNoticeDate] ,[DatabaseCode],[MasterPolicy] ,[BillingType] ,[RowStatus] ,[OriginalInceptionDate] ,[MultiplePolicyFlag] ,[ARICBusinessUnit] ,[HonorCurrentRateFlag] ,[FarmType] ,[PrimaryPremiumStateCode] ,[StateName] ,[BillingSystem] ,[ExperienceModFactor] ,[Exposure] ,[TaxFeeSurchargeFlag] , [Rate] FROM [DataStoreARICECM].[dbo].[Policy_Coverage]  where PolicyPrefix='{$policyPrefix}'\"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> ecmPolicyCoverage",
				"source(output(",
				"          AGENCY_ID as long,",
				"          AGENCY_VID as long,",
				"          AGENCY_GEN_ADDRESS_ID as long,",
				"          AGENCY_CODE as string,",
				"          AGENCY_NAME as string,",
				"          AGENCY_STATUS as string,",
				"          AGENCY_CATEGORY as string,",
				"          DIRECT_BILL_FLAG_YN as string,",
				"          TELEPHONE as string,",
				"          FAX as string,",
				"          EMAIL_ID as string,",
				"          WEBSITE as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_PARENT_ID as long,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from [dbo].[POL_AGENCY] where  ENTITY_TYPE=\\'AGENCY\\'',",
				"     format: 'query') ~> polAgencyStg",
				"source(output(",
				"          AGENCY_ID as long,",
				"          AGENCY_VID as long,",
				"          AGENCY_GEN_ADDRESS_ID as long,",
				"          AGENCY_CODE as string,",
				"          AGENCY_NAME as string,",
				"          AGENCY_STATUS as string,",
				"          AGENCY_CATEGORY as string,",
				"          DIRECT_BILL_FLAG_YN as string,",
				"          TELEPHONE as string,",
				"          FAX as string,",
				"          EMAIL_ID as string,",
				"          WEBSITE as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_PARENT_ID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from [dbo].[POL_AGENCY]  pa where pa.ENTITY_TYPE=\\'PRODUCER\\'',",
				"     format: 'query') ~> producerStg",
				"source(output(",
				"          StateCode as string,",
				"          StateAbbreviation as string,",
				"          StateName as string,",
				"          WCTypeOfLossGroupCode as string,",
				"          QuickRaterStateID as integer,",
				"          AutoDoNotRenewDays as integer,",
				"          AutoConditionalRenewalNoticeDays as integer,",
				"          AutoUMLimitFlag as string,",
				"          AutoStateBand as string,",
				"          AutoRegionID as integer,",
				"          StateTypeCode as string,",
				"          FIPSStateCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stateCode",
				"source(output(",
				"          POLICY_ID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select MAX(POLICY_ID) as POLICY_ID from POL_POLICY',",
				"     format: 'query') ~> stgPolicyNextPkey",
				"derivedColumn1 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet1@(output1)",
				"ecmPolicyCoverage keyGenerate(output(pid as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"insuredLookUp derive(POLICY_ID = policyPkeyCache#outputs()[1].POLICY_ID + pid,",
				"          POLICY_VID = 1,",
				"          POLICY_NUMBER = Policy,",
				"          ENTITY_TYPE = PolicyPrefix,",
				"          PAYMENT_PLAN = toString(PolicyTermMonths),",
				"          AGENCY_ID = agencyPKey,",
				"          AGENCY_VID = agencyPvKey,",
				"          PRODUCER_ID = producerDerviedCol@AGENCY_ID,",
				"          PRODUCER_VID = producerDerviedCol@AGENCY_VID,",
				"          LEGACY_POLICY_NUMBER = PreviousPolicy,",
				"          INCEPTION_DATE = OriginalInceptionDate,",
				"          POLICY_STATE_CODE = stateCodeSink#lookup(PrimaryPremiumStateCode).StateAbbreviation) ~> derivedColumn1",
				"polAgencyStg select(mapColumn(",
				"          AGENCY_ID,",
				"          AGENCY_VID,",
				"          AGENCY_CODE,",
				"          AGENCY_NAME,",
				"          ENTITY_TYPE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(agencyPKey = AGENCY_ID,",
				"          agencyPvKey = AGENCY_VID,",
				"          AGENCY_CODE = AGENCY_CODE) ~> polAgencySrc",
				"surrogateKey1, polAgencySrc lookup(AgentCode == AGENCY_CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> producerLookup",
				"producerLookup, producerDerviedCol lookup(SubProducerCode == producerDerviedCol@AGENCY_CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> insuredLookUp",
				"producerStg select(mapColumn(",
				"          AGENCY_ID,",
				"          AGENCY_VID,",
				"          AGENCY_CODE,",
				"          AGENCY_NAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> producerSelect",
				"producerSelect derive(AGENCY_ID = AGENCY_ID,",
				"          AGENCY_VID = AGENCY_VID,",
				"          AGENCY_CODE = AGENCY_CODE) ~> producerDerviedCol",
				"stgPolicyNextPkey derive(POLICY_ID = iifNull(POLICY_ID, 0, POLICY_ID)) ~> derivedColumn2",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> stgPolicy",
				"stateCode sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     keys:['StateCode'],",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> stateCodeSink",
				"derivedColumn2 sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> policyPkeyCache"
			]
		}
	}
}
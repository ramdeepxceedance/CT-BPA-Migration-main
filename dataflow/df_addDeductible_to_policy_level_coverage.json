{
	"name": "df_addDeductible_to_policy_level_coverage",
	"properties": {
		"folder": {
			"name": "Target Stage Data Flows/deductibles"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_stage_coverage",
						"type": "DatasetReference"
					},
					"name": "targetCoverage"
				},
				{
					"dataset": {
						"referenceName": "ds_stage_deductible",
						"type": "DatasetReference"
					},
					"name": "osDeductibleLimit"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_stage_coverage",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          coverage_id as integer,",
				"          policy_id as integer,",
				"          json_data as string,",
				"          coverage_code as string,",
				"          risk_id as long,",
				"          location_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from coverage where risk_id is null\\n',",
				"     format: 'query') ~> targetCoverage",
				"source(output(",
				"          deductible_id as integer,",
				"          coverage_id as integer,",
				"          json_data as string,",
				"          risk_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> osDeductibleLimit",
				"filter1, derivedColumn1 join(targetCoverage@coverage_id == osDeductibleLimit@coverage_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"osDeductibleLimit derive(deductibleJson = json_data) ~> derivedColumn1",
				"join1 derive(json_data = replace(targetCoverage@json_data, '\"deductible\":[]',concat( '\"deductible\":', deductibleJson))) ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(!isNull(targetCoverage@coverage_id))) ~> AlterRow1",
				"targetCoverage filter(isNull (risk_id)) ~> filter1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          coverage_id as integer,",
				"          policy_id as integer,",
				"          json_data as string,",
				"          coverage_code as string,",
				"          risk_id as long,",
				"          location_id as long",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['policy_id','coverage_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}
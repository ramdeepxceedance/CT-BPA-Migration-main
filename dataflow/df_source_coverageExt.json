{
	"name": "df_source_coverageExt",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_coverage",
						"type": "DatasetReference"
					},
					"name": "coverageStaging"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "policyStaging"
				},
				{
					"dataset": {
						"referenceName": "ds_source_policyCoverage",
						"type": "DatasetReference"
					},
					"name": "policySource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_coverageExt",
						"type": "DatasetReference"
					},
					"name": "coverageExtStaging"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "sourcePolicyCoveragelookup"
				},
				{
					"name": "policyStagingSelect"
				},
				{
					"name": "policyCoverageMapping"
				},
				{
					"name": "policySourceSelect"
				},
				{
					"name": "stagingCoveragePolicyJoin"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string ('CFA'),",
				"     policies as string[]",
				"}",
				"source(output(",
				"          COVERAGE_ID as long,",
				"          COVERAGE_VID as long,",
				"          COVERAGE_CODE_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          COV_STATE_ID as long,",
				"          COVERAGE_EFFECTIVE_DATE as timestamp,",
				"          COVERAGE_EXPIRATION_DATE as timestamp,",
				"          ASL_CODE as string,",
				"          ASSL_CODE as string,",
				"          ASL_CODE_GBL as string,",
				"          ASSL_CODE_GBL as string,",
				"          CLASSIFICATION_CODE_ID as long,",
				"          CLASSIFICATION_CODE_OVID as long,",
				"          COVERAGE_CODE as string,",
				"          RETROACTIVE_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from [DM_Source_Stage].[dbo].[POL_COVERAGE] ',",
				"     format: 'query') ~> coverageStaging",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[POL_POLICY] where ENTITY_TYPE ='{$policyPrefix}' \"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy_number in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> policyStaging",
				"source(output(",
				"          Policy as string,",
				"          Policy_Sequence as string,",
				"          ARICLOB as string,",
				"          ARICGroupCode as string,",
				"          Description as string,",
				"          Product as string,",
				"          ARICCoverageCode as string,",
				"          ARICCoverageDescription as string,",
				"          EndorsementNumber as short,",
				"          LocationNumber as string,",
				"          LocationUnitNumber as string,",
				"          BuildingNumber as string,",
				"          LocationName as string,",
				"          LocationAddress1 as string,",
				"          LocationAddress2 as string,",
				"          LocationAddress3 as string,",
				"          Occupancy as string,",
				"          LocationCity as string,",
				"          LocationZipCode as string,",
				"          LocationCounty as string,",
				"          Territory as string,",
				"          ConstructionCode as string,",
				"          ConstructionYear as integer,",
				"          NumberOfFloors as integer,",
				"          ProtectionClass as string,",
				"          GEOLatitude as decimal(11,8),",
				"          GEOLongitude as decimal(11,8),",
				"          CauseOfLoss as string,",
				"          BCEGClassCode as string,",
				"          CoverageForm as string,",
				"          DesignatedPremisis as string,",
				"          WindIndicatorFlag as string,",
				"          PurchaseCost as decimal(8,2),",
				"          dbo as string,",
				"          CoInsuranceBuilding as integer,",
				"          CoInsurancePersonalProperty as integer,",
				"          CoInsuranceBodilyInjury as integer,",
				"          CountryCode as string,",
				"          MunicipalityCode as string,",
				"          ParkName as string,",
				"          CountyCode as short,",
				"          NumberParkSpaces as integer,",
				"          NumberOfAcres as integer,",
				"          OwnOrRent as string,",
				"          ResidenceTypeCode as string,",
				"          LocationZone as string,",
				"          ARICCoverageSequence as integer,",
				"          CoveragePart as string,",
				"          CoverageAddDate as timestamp,",
				"          CoverageDescription as string,",
				"          CoverageInternalCode as string,",
				"          CoverageAbbreviation as string,",
				"          CoveragePartSequence as integer,",
				"          CoverageISOLine as integer,",
				"          CoverageCATCode as string,",
				"          CoverageLine4 as integer,",
				"          CoverageAddUser as string,",
				"          CoverageUpdateDate as timestamp,",
				"          CoverageUpdateUser as string,",
				"          CoverageLineFlag as string,",
				"          LocationState as string,",
				"          ISOClassCode as string,",
				"          RetroEndorsementNumber as integer,",
				"          PolicyPrefix as string,",
				"          EffectiveDate as timestamp,",
				"          Policy_Accounting_date as timestamp,",
				"          ExpirationDate as timestamp,",
				"          CancelDate as timestamp,",
				"          CancelReason as string,",
				"          CancelReasonDescription as string,",
				"          PolicyTermMonths as integer,",
				"          InsuredName as string,",
				"          InsuredAddress1 as string,",
				"          InsuredAddress2 as string,",
				"          InsuredCity as string,",
				"          InsuredState as string,",
				"          InsuredZipCode as string,",
				"          CompanyCode as string,",
				"          CompanyName as string,",
				"          GroupName as string,",
				"          GBLICompanyCode as string,",
				"          AgentCode as string,",
				"          AgentName as string,",
				"          AgentOffice as string,",
				"          GroupCode as string,",
				"          AgentCity as string,",
				"          EMail as string,",
				"          AgentPhone as string,",
				"          AgentCounty as string,",
				"          AgentZipCode as string,",
				"          AgentAddress1 as string,",
				"          AgentAddress2 as string,",
				"          AgentState as string,",
				"          SubProducerNumber as string,",
				"          SubProducerCode as string,",
				"          SubProducerName as string,",
				"          SubproducerState as string,",
				"          SubProducerType as string,",
				"          ProductCode as string,",
				"          ProductCodeDescription as string,",
				"          PreviousPolicy as string,",
				"          OriginalPolicyYear as integer,",
				"          NonRenewalReason as string,",
				"          NonRenewalNoticeDate as timestamp,",
				"          DatabaseCode as string,",
				"          Policy_ID as integer,",
				"          MinimumPremium as decimal(13,0),",
				"          POlicy_Receive_date as timestamp,",
				"          MasterPolicy as string,",
				"          BillingType as string,",
				"          RowStatus as string,",
				"          OriginalInceptionDate as timestamp,",
				"          MultiplePolicyFlag as string,",
				"          ARICBusinessUnit as string,",
				"          HonorCurrentRateFlag as string,",
				"          FarmType as string,",
				"          PrimaryPremiumStateCode as string,",
				"          StateName as string,",
				"          Policy_Insert_Date as date,",
				"          BillingSystem as string,",
				"          Cov_effective_Date as timestamp,",
				"          Cov_Expiry_Date as timestamp,",
				"          ReceivedDate as date,",
				"          CoverageArrayNumber as short,",
				"          LiabilityFlag as string,",
				"          ExperienceModFactor as decimal(7,4),",
				"          Exposure as decimal(8,0),",
				"          TaxFeeSurchargeFlag as string,",
				"          CancelReinstateFlag as string,",
				"          ReleasedFlag as string,",
				"          ReleaseDate as date,",
				"          Rate as decimal(12,6),",
				"          PremiumStateCode as string,",
				"          Coverage_ID as integer,",
				"          Coverage_accounting_date as timestamp,",
				"          Coverage_Insert_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[Policy_Coverage] where PolicyPrefix = '{$policyPrefix}'\"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> policySource",
				"coverageStaging select(mapColumn(",
				"          COVERAGE_ID,",
				"          COVERAGE_CODE_ID,",
				"          POLICY_ID,",
				"          COVERAGE_EFFECTIVE_DATE,",
				"          COVERAGE_EXPIRATION_DATE,",
				"          COVERAGE_CODE,",
				"          COVERAGE_VID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"stagingCoveragePolicyJoin derive(aricGrpCode = split(COVERAGE_CODE,'-')[1],",
				"          pimarypremiumstate = split(COVERAGE_CODE,'-')[2],",
				"          aricLob = split(COVERAGE_CODE,'-')[3],",
				"          aricCoverageCode = split(COVERAGE_CODE,'-')[4],",
				"          Ariccoveragecodesequnce = toString(split(COVERAGE_CODE,'-')[5]),",
				"          POLICY_NUMBER = POLICY_NUMBER) ~> derivedColumn1",
				"derivedColumn1, policySourceSelect lookup(POLICY_NUMBER == Policy",
				"     && aricGrpCode == ARICGroupCode",
				"     && pimarypremiumstate == PrimaryPremiumStateCode",
				"     && derivedColumn1@aricCoverageCode == policySourceSelect@ARICCoverageCode",
				"     && Ariccoveragecodesequnce == toString(ARICCoverageSequence),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> sourcePolicyCoveragelookup",
				"policyStaging select(mapColumn(",
				"          POLICY_ID,",
				"          POLICY_VID,",
				"          POLICY_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> policyStagingSelect",
				"sourcePolicyCoveragelookup derive(COVERAGE_ID = select1@COVERAGE_ID,",
				"          COVERAGE_VID = COVERAGE_VID,",
				"          AricCoverageSequence = Ariccoveragecodesequnce,",
				"          AricGroupCode = ARICGroupCode,",
				"          CoverageDescription = CoverageDescription,",
				"          ARICLOB = policySourceSelect@ARICLOB,",
				"          CoverageInternalCode = CoverageInternalCode,",
				"          CoverageAbbreviation = CoverageAbbreviation,",
				"          CoverageArrayNumber = CoverageArrayNumber,",
				"          CoveragePart = CoveragePart,",
				"          CoverageISOLine = CoverageISOLine,",
				"          CoverageCATCode = CoverageCATCode) ~> policyCoverageMapping",
				"policySource select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> policySourceSelect",
				"select1, policyStagingSelect join(select1@POLICY_ID == policyStagingSelect@POLICY_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> stagingCoveragePolicyJoin",
				"policyCoverageMapping sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COVERAGE_ID as long,",
				"          COVERAGE_VID as long,",
				"          ARICCoverageSequence as integer,",
				"          ARICTaxFeeSurchargeFlag as string,",
				"          PropertyOrCasualty as string,",
				"          ARICGroupCode as string,",
				"          LocationState as string,",
				"          ARICLOB as string,",
				"          CoverageInternalCode as string,",
				"          CoverageAbbreviation as string,",
				"          CoverageDescription as string,",
				"          CoverageArrayNumber as integer,",
				"          CoveragePartSequence as integer,",
				"          CoveragePart as string,",
				"          CoverageISOLine as integer,",
				"          CoverageCATCode as string,",
				"          CoverageFullyEarned as string,",
				"          LiabilityFlag as string,",
				"          CoverageLine4 as integer,",
				"          CoverageEffectiveDate as timestamp,",
				"          CoverageExpirationDate as timestamp,",
				"          CoverageAddDate as timestamp,",
				"          CoverageAddUser as string,",
				"          CoverageUpdateDate as timestamp,",
				"          CoverageUpdateUser as string,",
				"          CoverageLineFlag as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coverageExtStaging"
			]
		}
	}
}
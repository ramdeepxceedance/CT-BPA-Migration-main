{
	"name": "df_bpa_cfa_limits",
	"properties": {
		"folder": {
			"name": "Target Stage Data Flows/cfa"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bpa_CFA_product_json",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "ds_BPA_limit",
						"type": "DatasetReference"
					},
					"name": "pkey"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_BPA_limit",
						"type": "DatasetReference"
					},
					"name": "limitMeta"
				},
				{
					"name": "nextPkey"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "flatten3"
				},
				{
					"name": "derivedColumn4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BroadLine as string,",
				"          Sections as (Code as string, CoverageGroups as (CoverageLevel as string, Coverages as (Code as string, CoverageType as string, Deductible as (DeductibleValues as (ValueCode as string, ValueText as string)[], DefaultValue as string, InputType as string, Name as string, TypeCode as string, ValueType as string)[], Description as string, DisplayName as string, IsDefault as boolean, IsMandatory as boolean, Level as string, Limit as (DefaultValue as string, InputType as string, LimitValues as (ValueCode as string, ValueText as string)[], Max as double, Min as double, Name as string, PercentageOf as string, TypeCode as string, ValueType as string)[], SequenceNumber as short)[], DisplayName as string, GroupCode as string, IsMandatory as boolean, SequenceNumber as short)[], DisplayName as string, IsMandatory as boolean, IsPrimary as boolean, IsSharedCarrier as boolean, LOB as string, SequenceNumber as short)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'singleDocument') ~> source2",
				"source(output(",
				"          limit_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: ('select COALESCE(MAX(limit_id),0) as limit_id from bpa_limit_detail'),",
				"     format: 'query') ~> pkey",
				"source2 foldDown(unroll(Sections.CoverageGroups, Sections),",
				"     mapColumn(",
				"          BroadLine,",
				"          CoverageGroups = Sections.CoverageGroups,",
				"          Coverages = Sections.CoverageGroups.Coverages,",
				"          covGrpName = Sections.CoverageGroups.DisplayName,",
				"          GroupCode = Sections.CoverageGroups.GroupCode,",
				"          Code = Sections.Code",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten3 derive(secCode = secCode,",
				"          limitName = Limit.Name,",
				"          limitTypeCode = Limit.TypeCode,",
				"          limitValueType = Limit.ValueType) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          coverageCode = CoverageCode,",
				"          secCode,",
				"          limitName,",
				"          limitTypeCode,",
				"          limitValueType,",
				"          coverage_group_code = groupCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 keyGenerate(output(pkey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"flatten1 foldDown(unroll(Coverages.Limit, Coverages),",
				"     mapColumn(",
				"          BroadLine,",
				"          CoverageCode = Coverages.Code,",
				"          Limit = Coverages.Limit,",
				"          secCode = Code,",
				"          coverageName = Coverages.DisplayName,",
				"          covGrpName,",
				"          groupCode = GroupCode",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten3",
				"surrogateKey1 derive(limit_id = nextPkey#outputs()[1].limit_id + pkey) ~> derivedColumn4",
				"derivedColumn4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          limit_id as long,",
				"          coverageCode as string,",
				"          secCode as string,",
				"          limitValueType as string,",
				"          limitTypeCode as string,",
				"          limitName as string,",
				"          coverage_group_code as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> limitMeta",
				"pkey sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> nextPkey"
			]
		}
	}
}
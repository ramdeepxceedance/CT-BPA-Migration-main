{
	"name": "df_source_POL_TX_Deductible",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_txnBridge",
						"type": "DatasetReference"
					},
					"name": "StagingTxnBridge"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_polTxn",
						"type": "DatasetReference"
					},
					"name": "stgPolTxn"
				},
				{
					"dataset": {
						"referenceName": "ds_source_FactCoverageDeductible",
						"type": "DatasetReference"
					},
					"name": "fcp"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "polPolicy"
				},
				{
					"dataset": {
						"referenceName": "ds_source_POL_TX_LIMIT_DED_OPT",
						"type": "DatasetReference"
					},
					"name": "PolTxnLimitDedMaxId"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_POL_TX_LIMIT_DED_OPT",
						"type": "DatasetReference"
					},
					"name": "PolTxLimitDedOptLimit2"
				},
				{
					"name": "polTxnLDCache"
				}
			],
			"transformations": [
				{
					"name": "flowlet3",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "ded1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "filter1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "join2"
				},
				{
					"name": "distinctRows"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string,",
				"     policies as string[]",
				"}",
				"source(output(",
				"          TX_BRIDGE_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          RISK_ID as long,",
				"          RISK_OVID as long,",
				"          COVERAGE_ID as long,",
				"          COVERAGE_VID as long,",
				"          TX_ID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select distinct TX_BRIDGE_ID,POLICY_ID,POLICY_OVID,RISK_ID,RISK_OVID,COVERAGE_ID,COVERAGE_VID,TX_ID from POL_TX_BRIDGE',",
				"     format: 'query') ~> StagingTxnBridge",
				"source(output(",
				"          TX_ID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          TX_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select distinct TX_ID,POLICY_ID,POLICY_OVID,TX_CODE from POL_TX  ',",
				"     format: 'query') ~> stgPolTxn",
				"source(output(",
				"          Policy as string,",
				"          Policy_Sequence as string,",
				"          PolicyPrefix as string,",
				"          ARICCoverageCode as string,",
				"          ARICCoverageDescription as string,",
				"          CoverageDescription as string,",
				"          CoverageInternalCode as string,",
				"          LocationState as string,",
				"          ARICLOB as string,",
				"          LocationNumber as string,",
				"          LocationUnitNumber as string,",
				"          ARICCoverageSequence as integer,",
				"          CoveragePart as string,",
				"          CoverageAddDate as timestamp,",
				"          DESDSC as string,",
				"          DEDESC as string,",
				"          DeductibleCode as string,",
				"          DeductibleAmount1Type as string,",
				"          DeductibleAmount1 as decimal(7,0),",
				"          DeductibleAmount2Type as string,",
				"          DeductibleAmount2 as decimal(7,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [Fact_Coverage_Deductible] where PolicyPrefix='{$policyPrefix}'\"  +iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> fcp",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from POL_POLICY ',",
				"     format: 'query') ~> polPolicy",
				"source(output(",
				"          limit_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select MAX (TX_LIMIT_DED_OPT_ID)  as limit_id  from POL_TX_LIMIT_DED_OPT',",
				"     format: 'query') ~> PolTxnLimitDedMaxId",
				"derivedColumn4 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet3@(output1)",
				"distinctRows derive(TX_ID = TX_ID,",
				"          RISK_ID = RISK_ID,",
				"          TX_BRIDGE_ID = TX_BRIDGE_ID,",
				"          RISK_OVID = RISK_OVID,",
				"          POLICY_ID = POLICY_ID,",
				"          POLICY_OVID = POLICY_OVID,",
				"          COVERAGE_ID = COVERAGE_ID,",
				"          COVERAGE_OVID = COVERAGE_VID) ~> ded1",
				"join1 derive(Policy_Sequence_tx = split(TX_CODE,'-')[1],",
				"          LocationNumber_tx = split(TX_CODE,'-')[2],",
				"          LocationUnitNumber_tx = split(TX_CODE,'-')[3],",
				"          ARICGroupCode_tx = split(TX_CODE,'-')[4],",
				"          PrimaryPremiumStateCode_tx = split(TX_CODE,'-')[5],",
				"          ARICLOB_tx = split(TX_CODE,'-')[6],",
				"          ARICCoverageCode_tx = split(TX_CODE,'-')[7],",
				"          ARICCoverageSequence_tx = split(TX_CODE,'-')[8]) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          TX_BRIDGE_ID,",
				"          POLICY_ID = StagingTxnBridge@POLICY_ID,",
				"          POLICY_OVID = StagingTxnBridge@POLICY_OVID,",
				"          TX_ID = StagingTxnBridge@TX_ID,",
				"          RISK_ID,",
				"          RISK_OVID,",
				"          COVERAGE_ID,",
				"          COVERAGE_VID,",
				"          TX_ID = stgPolTxn@TX_ID,",
				"          POLICY_ID = stgPolTxn@POLICY_ID,",
				"          POLICY_OVID = stgPolTxn@POLICY_OVID,",
				"          TX_CODE,",
				"          Policy_Sequence_tx,",
				"          LocationNumber_tx,",
				"          LocationUnitNumber_tx,",
				"          ARICGroupCode_tx,",
				"          PrimaryPremiumStateCode_tx,",
				"          ARICLOB_tx,",
				"          ARICCoverageCode_tx,",
				"          ARICCoverageSequence_tx",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"fcp select(mapColumn(",
				"          Policy,",
				"          Policy_Sequence,",
				"          PolicyPrefix,",
				"          ARICCoverageCode,",
				"          ARICCoverageDescription,",
				"          CoverageDescription,",
				"          CoverageInternalCode,",
				"          LocationState,",
				"          ARICLOB,",
				"          LocationNumber,",
				"          LocationUnitNumber,",
				"          ARICCoverageSequence,",
				"          CoveragePart,",
				"          CoverageAddDate,",
				"          DESDSC,",
				"          DEDESC,",
				"          DeductibleCode,",
				"          DeductibleAmount1Type,",
				"          DeductibleAmount1,",
				"          DeductibleAmount2Type,",
				"          DeductibleAmount2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"surrogateKey1 derive(LIMIT_DED_OPT_TYPE_ID = 1,",
				"          LDO_CODE = DeductibleCode,",
				"          LDO_VALUE = DeductibleAmount1,",
				"          LDO_TXT = DEDESC,",
				"          TX_LIMIT_DED_OPT_ID = pkey + polTxnLDCache#outputs()[1].limit_id,",
				"          LDO_FLAG = 'D') ~> derivedColumn4",
				"join2 filter(!isNull(Policy)) ~> filter1",
				"ded1 keyGenerate(output(pkey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"StagingTxnBridge, stgPolTxn join(StagingTxnBridge@TX_ID == stgPolTxn@TX_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"PolTxnLimitDedMaxId derive(limit_id = iifNull(limit_id, 0, limit_id)) ~> derivedColumn5",
				"select1, select2 join(Policy_Sequence_tx == Policy_Sequence",
				"     && LocationNumber_tx == LocationNumber",
				"     && LocationUnitNumber_tx == LocationUnitNumber",
				"     && ARICLOB_tx == ARICLOB",
				"     && ARICCoverageCode_tx == ARICCoverageCode",
				"     && ARICCoverageSequence_tx == toString(ARICCoverageSequence),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"filter1 aggregate(groupBy(TX_BRIDGE_ID),",
				"     each(match(name != 'TX_BRIDGE_ID'), $$ = first($$))) ~> distinctRows",
				"flowlet3@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          TX_LIMIT_DED_OPT_ID as long,",
				"          TX_ID as long,",
				"          LOCATION_ID as long,",
				"          LOCATION_OVID as long,",
				"          SECTION_ID as long,",
				"          SECTION_OVID as long,",
				"          TX_BRIDGE_ID as long,",
				"          RISK_ID as long,",
				"          RISK_OVID as long,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          LIMIT_DED_OPT_TYPE_ID as long,",
				"          LDO_FLAG as string,",
				"          LDO_CODE as string,",
				"          LIMIT_OCCURRENCE_FLAG as string,",
				"          LDO_VALUE as long,",
				"          LDO_VALUE_CCY_CODE as string,",
				"          LDO_PERCENTAGE as decimal(6,4),",
				"          LDO_TEXT as string,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          DATA_HASH as binary,",
				"          SOURCE_KEY as string,",
				"          COVERAGE_ID as long,",
				"          COVERAGE_OVID as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PolTxLimitDedOptLimit2",
				"derivedColumn5 sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> polTxnLDCache"
			]
		}
	}
}
{
	"name": "df_source_empInsObj",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRisk",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRisk"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policy",
						"type": "DatasetReference"
					},
					"name": "StagingPolicy"
				},
				{
					"dataset": {
						"referenceName": "ds_source_propertyUnits",
						"type": "DatasetReference"
					},
					"name": "EcmPropertyUnits"
				},
				{
					"dataset": {
						"referenceName": "ds_source_propertyUnits",
						"type": "DatasetReference"
					},
					"name": "ecmWithLimits"
				},
				{
					"dataset": {
						"referenceName": "joinTableStageSQL",
						"type": "DatasetReference"
					},
					"name": "sourceRefLookUp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypeBreed"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypeName"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypeSex"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypePurchaseDate"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypeMortality"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypeUse"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypePrice"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypeYearBorn"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypeRequestedLimit"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_policyRiskDetails",
						"type": "DatasetReference"
					},
					"name": "StagingPolicyRiskTypeAge"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "flowlet2",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "flowlet3",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "flowlet4",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "flowlet5",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "flowlet6",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "flowlet7",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "flowlet8",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "flowlet9",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "flowlet10",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "horseBreed"
				},
				{
					"name": "horseSex"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "use"
				},
				{
					"name": "mortality"
				},
				{
					"name": "purchaseDate"
				},
				{
					"name": "purchasePrcie"
				},
				{
					"name": "yearBorn"
				},
				{
					"name": "requestedLimit"
				},
				{
					"name": "ageInYears"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "lookup3"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string (\"\"),",
				"     policies as string[] ([''])",
				"}",
				"source(output(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_NUMBER as string,",
				"          POLICY_ID as long,",
				"          POLICY_OVID as long,",
				"          RISK_IS_ACTIVE_YN as string,",
				"          RISK_EFF_DATE as timestamp,",
				"          RISK_EXP_DATE as timestamp,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingPolicyRisk",
				"source(output(",
				"          POLICY_ID as long,",
				"          POLICY_VID as long,",
				"          REINSURANCE_DAC as string,",
				"          PREVIOUS_INSURANCE_NO_REMARKS as string,",
				"          AGENCY_ID as long,",
				"          AGENCY_OVID as long,",
				"          PRODUCER_ID as long,",
				"          PRODUCER_OVID as long,",
				"          PRODUCER_CONTACT_ID as long,",
				"          PRODUCER_CONTACT_OVID as long,",
				"          POLICY_NUMBER as string,",
				"          ENTITY_TYPE as string,",
				"          ENTITY_STATUS as string,",
				"          IS_RENEWAL_YN as string,",
				"          REVISION_NUMBER as integer,",
				"          PRODUCT_ID as long,",
				"          PRODUCT_OVID as long,",
				"          POLICY_EFFECTIVE_DATE as timestamp,",
				"          POLICY_EXPIRATION_DATE as timestamp,",
				"          NON_RENEWAL_CODE as string,",
				"          POLICY_RENEWED_YN as string,",
				"          CANCELLATION_DATE as timestamp,",
				"          IS_RENEWABLE_YN as string,",
				"          PREVIOUS_INSURANCE_NO_REASON as string,",
				"          POLICY_STATUS as string,",
				"          CANCEL_REASON_CODE as string,",
				"          CANCEL_REASON_DESCRIPTION as string,",
				"          CANCEL_METHOD as string,",
				"          CANCEL_METHOD_DESC as string,",
				"          LOSE_REASON_CODE as string,",
				"          LOSE_REASON_DESC as string,",
				"          DECLINATION_REASON_CODE as string,",
				"          DECLINATION_REASON_DESC as string,",
				"          NOT_WRITTEN_REASON_CODE as string,",
				"          NOT_WRITTEN_REASON_DESC as string,",
				"          POLICY_STATE_CODE as string,",
				"          PROGRAM_ID as long,",
				"          PROGRAM_OVID as long,",
				"          BILLING_TYPE_CODE as string,",
				"          UNDERWRITING_COMPANY_ID as long,",
				"          UNDERWRITING_COMPANY_OVID as long,",
				"          SUBMISSION_ID as long,",
				"          PREVIOUS_INSURANCE_YN as string,",
				"          LEGACY_POLICY_NUMBER as string,",
				"          STATE as string,",
				"          POLICY_POLICY as integer,",
				"          PAYMENT_PLAN as string,",
				"          APPLICATION_RECEIVED_DATE as timestamp,",
				"          INCEPTION_DATE as timestamp,",
				"          BILL_TYPE as string,",
				"          FORMS_LANGUAGE as string,",
				"          BASE_CURRENCY as string,",
				"          INVOICE_CURRENCY as string,",
				"          PREVIOUS_POLICY_ID as long,",
				"          PREVIOUS_POLICY_OVID as long,",
				"          REVISED_FROM_POLICY_ID as long,",
				"          REVISED_FROM_POLICY_OVID as long,",
				"          OPERATING_COMPANY_ID as long,",
				"          OPERATING_COMPANY_OVID as long,",
				"          CONVERTED_FROM_ID as long,",
				"          CONVERTED_FROM_OVID as long,",
				"          INSTALLMENT_RENEWAL as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from POL_POLICY where policy_number like '{$policyPrefix}%'\"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy_number in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> StagingPolicy",
				"source(output(",
				"          PolicyPrefix as string,",
				"          Policy as string,",
				"          Policy_Sequence as string,",
				"          RowStatus as string,",
				"          EffectiveDate as timestamp,",
				"          ExpirationDate as timestamp,",
				"          LocationNumber as string,",
				"          LocationUnitNumber as string,",
				"          {UnitType/ModificationType} as string,",
				"          YearBuild as integer,",
				"          UnitValue as decimal(13,0),",
				"          SquareFootage as integer,",
				"          RiskUseCode as string,",
				"          Occupancy as string,",
				"          RoofTypeCode as string,",
				"          RoofYear as integer,",
				"          Make as string,",
				"          Model as string,",
				"          SerialNumber as string,",
				"          UnitWidth as integer,",
				"          RiskType as string,",
				"          UnitLength as integer,",
				"          PurchasePrice as decimal(9,0),",
				"          PurchaseDate as timestamp,",
				"          NewUsed as string,",
				"          ProtectionClass as string,",
				"          NumberOfSections as decimal(1,0),",
				"          AppraisalYear as integer,",
				"          AppraisedValue as decimal(9,0),",
				"          ConstructionTypeCode as string,",
				"          ParkCode as string,",
				"          OrdinanceLawPercent as decimal(5,2),",
				"          PropertyLossScore as string,",
				"          ProtectedRiskFlag as string,",
				"          PreferredRiskFlag as string,",
				"          ReplaceOrFullRepair as string,",
				"          MineSubsidenceFlag as string,",
				"          NumberOfStories as decimal(3,0),",
				"          InZoneFlag as string,",
				"          BasicFlag as string,",
				"          DwellingUnits as string,",
				"          ElectricSystemTypeCode as string,",
				"          PlumbingSystemTypeCode as string,",
				"          ExtentOfRoofUpdateCode as string,",
				"          ElectricSystemYear as integer,",
				"          ExtentOfElectricSystemUpdate as string,",
				"          PlumbingSystemYear as integer,",
				"          ExtentOfPlumbingSystemUpdate as string,",
				"          HeatingSystemYear as integer,",
				"          ExtentOfHeatingSystemUpdate as string,",
				"          MilesToFireDepartmentCode as string,",
				"          FeetToHydrantCode as string,",
				"          UnitDescription as string,",
				"          InflationGuardPercent as decimal(6,3),",
				"          NumberOfHouseholds as integer,",
				"          AnimalUseCode as string,",
				"          AnimalOtherUse as string,",
				"          LeaseFlag as string,",
				"          ID as integer,",
				"          DataSource as string,",
				"          FirelineScore as string,",
				"          FirelineStatus as string,",
				"          FirelineDate as timestamp,",
				"          AnimalDOB as timestamp,",
				"          AnimalName as string,",
				"          AnimalBreed as string,",
				"          AnimalBreedOtherDescription as string,",
				"          AnimalSireName as string,",
				"          AnimalDamName as string,",
				"          AnimalSex as string,",
				"          DW_InsertDate as date,",
				"          CoveragePart as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[PolicyPropertyUnit_P]  where TRIM(AnimalUseCode) != '?' and TRIM(RowStatus) != 'D' and (TRIM(AnimalBreed) != '' or TRIM(AnimalUseCode) != '') and PolicyPrefix='{$policyPrefix}'\"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> EcmPropertyUnits",
				"source(output(",
				"          Policy as string,",
				"          PolicyPrefix as string,",
				"          LocationNumber as string,",
				"          LocationUnitNumber as string,",
				"          ARICCoverageSequence as integer,",
				"          CoverageDescription as string,",
				"          Limit1 as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: ' select eq.Policy,eq.PolicyPrefix,\\n      eq.LocationNumber,eq.LocationUnitNumber,fcp.ARICCoverageSequence,fcp.CoverageDescription,fcp.Limit1 from PolicyPropertyUnit_P eq \\n      join  Fact_Coverage_Premium  \\n      fcp \\n      on eq.Policy = fcp.Policy \\n      and eq.LocationNumber=fcp.LocationNumber and eq.LocationUnitNumber=fcp.LocationUnitNumber\\n      where eq.PolicyPrefix = \\'EMP\\' and ( ARICCoverageSequence=1 or ARICCoverageSequence=2) ',",
				"     format: 'query') ~> ecmWithLimits",
				"source(output(",
				"          LOOKUP_CODE as string,",
				"          LOOKUP_DESCRIPTION as string,",
				"          LOOKUP_TYPE_ID as long,",
				"          LOOKUP_TYPE_DOMAIN as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select rl.LOOKUP_CODE, rl.LOOKUP_DESCRIPTION, rlt.LOOKUP_TYPE_ID, rlt.LOOKUP_TYPE_DOMAIN from REF_LOOKUP rl join REF_LOOKUP_TYPE rlt on rl.LOOKUP_TYPE_ID = rlt.LOOKUP_TYPE_ID where rlt.LOOKUP_TYPE_ID = 1',",
				"     format: 'query') ~> sourceRefLookUp",
				"derivedColumn1 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet1@(output1)",
				"horseBreed compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet2@(output1)",
				"horseSex compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet3@(output1)",
				"use compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet4@(output1)",
				"purchaseDate compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet5@(output1)",
				"derivedColumn2 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet6@(output1)",
				"derivedColumn3 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet7@(output1)",
				"yearBorn compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet8@(output1)",
				"purchasePrcie compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet9@(output1)",
				"ageInYears compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet10@(output1)",
				"lookup1 filter(not(isNull(POLICY_NUMBER))) ~> filter1",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_CODE = RISK_CODE,",
				"          ATTRIBUTE_NAME = \"horseName\",",
				"          ATTRIBUTE_VALUE = AnimalName) ~> derivedColumn1",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_CODE = AnimalUseCode,",
				"          ATTRIBUTE_NAME = 'horseBreed',",
				"          ATTRIBUTE_VALUE = AnimalBreed) ~> horseBreed",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISKCODE = RiskUseCode,",
				"          ATTRIBUTE_NAME = \"horseSex\",",
				"          ATTRIBUTE_VALUE = AnimalSex) ~> horseSex",
				"join1, EcmPropertyUnits lookup(POLICY_NUMBER == Policy",
				"     && split(RISK_NUMBER,'-')[1] == LocationNumber",
				"     && split(RISK_NUMBER,'-')[2] == LocationUnitNumber,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_CODE = '',",
				"          ATTRIBUTE_NAME = 'use',",
				"          ATTRIBUTE_VALUE = AnimalUseCode) ~> use",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_CODE = '',",
				"          ATTRIBUTE_NAME = 'mortality') ~> mortality",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_CODE = '',",
				"          ATTRIBUTE_NAME = 'purchaseDate',",
				"          ATTRIBUTE_VALUE = iif(isNull(PurchaseDate), '', toString(year(PurchaseDate)))) ~> purchaseDate",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_CODE = '',",
				"          ATTRIBUTE_NAME = 'purchasePrice',",
				"          ATTRIBUTE_VALUE = toString(PurchasePrice)) ~> purchasePrcie",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_CODE = '',",
				"          ATTRIBUTE_NAME = 'yearBorn',",
				"          ATTRIBUTE_VALUE = iif(isNull(AnimalDOB), '', toString(year(AnimalDOB)))) ~> yearBorn",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_CODE = '',",
				"          ATTRIBUTE_NAME = 'requestedLimit') ~> requestedLimit",
				"filter1 derive(RISK_ID = RISK_ID,",
				"          RISK_VID = RISK_VID,",
				"          RISK_TYPE_CD = RiskType,",
				"          RISK_CODE = \"\",",
				"          ATTRIBUTE_NAME = \"ageInYears\",",
				"          ATTRIBUTE_VALUE = iif(isNull(AnimalDOB), '', toString(year(currentDate()) - year(AnimalDOB)))) ~> ageInYears",
				"mortality, ecmWithLimits lookup(EcmPropertyUnits@Policy == ecmWithLimits@Policy",
				"     && EcmPropertyUnits@LocationNumber == ecmWithLimits@LocationNumber",
				"     && EcmPropertyUnits@LocationUnitNumber == ecmWithLimits@LocationUnitNumber,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     asc(ecmWithLimits@Policy, true),",
				"     broadcast: 'auto')~> lookup2",
				"lookup2 derive(ATTRIBUTE_VALUE = iif(ARICCoverageSequence==1, 'MO01', 'MO02')) ~> derivedColumn2",
				"select1, ecmWithLimits lookup(POLICY_NUMBER == Policy",
				"     && split(RISK_NUMBER,'-')[1] == LocationNumber",
				"     && split(RISK_NUMBER,'-')[2] == LocationUnitNumber,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     asc(ecmWithLimits@Policy, true),",
				"     broadcast: 'auto')~> lookup3",
				"lookup3 derive(ATTRIBUTE_VALUE = Limit1) ~> derivedColumn3",
				"requestedLimit select(mapColumn(",
				"          RISK_ID,",
				"          RISK_VID,",
				"          RISK_TYPE_CD,",
				"          POLICY_NUMBER,",
				"          RISK_NUMBER,",
				"          RISK_CODE,",
				"          ATTRIBUTE_NAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"StagingPolicyRisk, StagingPolicy join(StagingPolicyRisk@POLICY_ID == StagingPolicy@POLICY_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypeBreed",
				"flowlet2@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypeName",
				"flowlet3@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypeSex",
				"flowlet5@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypePurchaseDate",
				"flowlet6@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypeMortality",
				"flowlet4@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypeUse",
				"flowlet9@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypePrice",
				"flowlet8@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypeYearBorn",
				"flowlet7@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypeRequestedLimit",
				"flowlet10@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RISK_ID as long,",
				"          RISK_VID as long,",
				"          RISK_TYPE_CD as string,",
				"          RISK_CODE as string,",
				"          ATTRIBUTE_NAME as string,",
				"          ATTRIBUTE_VALUE as string,",
				"          SORT_ORDER as integer,",
				"          BATCH_ID as long,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StagingPolicyRiskTypeAge"
			]
		}
	}
}
{
	"name": "df_source_coverageCode",
	"properties": {
		"folder": {
			"name": "Source Stage Data Flows/txnDataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_policyCoverage",
						"type": "DatasetReference"
					},
					"name": "policyCoverageSource"
				},
				{
					"dataset": {
						"referenceName": "ds_source_stage_coverageCode",
						"type": "DatasetReference"
					},
					"name": "pkey"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_stage_coverageCode",
						"type": "DatasetReference"
					},
					"name": "coverageCodeStaging"
				},
				{
					"name": "ssCoverCodPkeyCache"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "fl_source_addDefaultColumnFlowlet",
						"type": "DataFlowReference",
						"parameters": {
							"FL_batch": "1"
						}
					}
				},
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string ('CFA')",
				"}",
				"source(output(",
				"          Policy as string,",
				"          Policy_Sequence as string,",
				"          ARICLOB as string,",
				"          ARICGroupCode as string,",
				"          Description as string,",
				"          Product as string,",
				"          ARICCoverageCode as string,",
				"          ARICCoverageDescription as string,",
				"          EndorsementNumber as integer,",
				"          LocationNumber as string,",
				"          LocationUnitNumber as string,",
				"          BuildingNumber as string,",
				"          LocationName as string,",
				"          LocationAddress1 as string,",
				"          LocationAddress2 as string,",
				"          LocationAddress3 as string,",
				"          Occupancy as string,",
				"          LocationCity as string,",
				"          LocationZipCode as string,",
				"          LocationCounty as string,",
				"          Territory as string,",
				"          ConstructionCode as string,",
				"          ConstructionYear as integer,",
				"          NumberOfFloors as integer,",
				"          ProtectionClass as string,",
				"          GEOLatitude as decimal(11,8),",
				"          GEOLongitude as decimal(11,8),",
				"          CauseOfLoss as string,",
				"          BCEGClassCode as string,",
				"          CoverageForm as string,",
				"          DesignatedPremisis as string,",
				"          WindIndicatorFlag as string,",
				"          PurchaseCost as decimal(8,2),",
				"          dbo as string,",
				"          CoInsuranceBuilding as integer,",
				"          CoInsurancePersonalProperty as integer,",
				"          CoInsuranceBodilyInjury as integer,",
				"          CountryCode as string,",
				"          MunicipalityCode as string,",
				"          ParkName as string,",
				"          CountyCode as integer,",
				"          NumberParkSpaces as integer,",
				"          NumberOfAcres as integer,",
				"          OwnOrRent as string,",
				"          ResidenceTypeCode as string,",
				"          LocationZone as string,",
				"          ARICCoverageSequence as integer,",
				"          CoveragePart as string,",
				"          CoverageAddDate as timestamp,",
				"          CoverageDescription as string,",
				"          ISOClassCode as string,",
				"          RetroEndorsementNumber as integer,",
				"          PolicyPrefix as string,",
				"          EffectiveDate as timestamp,",
				"          Policy_Accounting_date as timestamp,",
				"          ExpirationDate as timestamp,",
				"          CancelDate as timestamp,",
				"          CancelReason as string,",
				"          CancelReasonDescription as string,",
				"          PolicyTermMonths as integer,",
				"          InsuredName as string,",
				"          InsuredAddress1 as string,",
				"          InsuredAddress2 as string,",
				"          InsuredCity as string,",
				"          InsuredState as string,",
				"          InsuredZipCode as string,",
				"          CompanyCode as string,",
				"          CompanyName as string,",
				"          GroupName as string,",
				"          GBLICompanyCode as string,",
				"          AgentCode as string,",
				"          AgentName as string,",
				"          AgentOffice as string,",
				"          GroupCode as string,",
				"          AgentCity as string,",
				"          EMail as string,",
				"          AgentPhone as string,",
				"          AgentCounty as string,",
				"          AgentZipCode as string,",
				"          AgentAddress1 as string,",
				"          AgentAddress2 as string,",
				"          AgentState as string,",
				"          SubProducerNumber as string,",
				"          SubProducerCode as string,",
				"          SubProducerName as string,",
				"          SubproducerState as string,",
				"          SubProducerType as string,",
				"          ProductCode as string,",
				"          ProductCodeDescription as string,",
				"          PreviousPolicy as string,",
				"          OriginalPolicyYear as integer,",
				"          NonRenewalReason as string,",
				"          NonRenewalNoticeDate as timestamp,",
				"          DatabaseCode as string,",
				"          Policy_ID as integer,",
				"          MinimumPremium as decimal(13,0),",
				"          POlicy_Receive_date as timestamp,",
				"          MasterPolicy as string,",
				"          BillingType as string,",
				"          RowStatus as string,",
				"          OriginalInceptionDate as timestamp,",
				"          MultiplePolicyFlag as string,",
				"          ARICBusinessUnit as string,",
				"          HonorCurrentRateFlag as string,",
				"          FarmType as string,",
				"          PrimaryPremiumStateCode as string,",
				"          StateName as string,",
				"          Policy_Insert_Date as date,",
				"          BillingSystem as string,",
				"          Cov_effective_Date as timestamp,",
				"          Cov_Expiry_Date as timestamp,",
				"          ReceivedDate as date,",
				"          CoverageArrayNumber as integer,",
				"          LiabilityFlag as string,",
				"          ExperienceModFactor as decimal(7,4),",
				"          Exposure as decimal(8,0),",
				"          TaxFeeSurchargeFlag as string,",
				"          CancelReinstateFlag as string,",
				"          ReleasedFlag as string,",
				"          ReleaseDate as date,",
				"          Rate as decimal(12,6),",
				"          PremiumStateCode as string,",
				"          Coverage_ID as integer,",
				"          Coverage_accounting_date as timestamp,",
				"          Coverage_Insert_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"SELECT distinct ARICCoverageCode,ARICCoverageDescription FROM [DataStoreARICECM].[dbo].[Policy_Coverage] where PolicyPrefix ='{$policyPrefix}'\"),",
				"     format: 'query') ~> policyCoverageSource",
				"source(output(",
				"          cid as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select MAX(COVERAGE_CODE_ID) as cid from POL_COVERAGE_CODE',",
				"     format: 'query') ~> pkey",
				"derivedColumn1 compose(mapParameter(",
				"          FL_batch = 1",
				"     ),",
				"     composition: 'fl_source_addDefaultColumnFlowlet') ~> flowlet1@(output1)",
				"policyCoverageSource select(mapColumn(",
				"          COVERAGE_CODE = ARICCoverageCode,",
				"          COVERAGE_DESCRIPTION = ARICCoverageDescription",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(skey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(COVERAGE_CODE_ID = skey + ssCoverCodPkeyCache#outputs()[1].cid) ~> derivedColumn1",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COVERAGE_CODE_ID as long,",
				"          COVERAGE_CODE as string,",
				"          COVERAGE_DESCRIPTION as string,",
				"          IS_VALID_YN as string,",
				"          VALID_START_DATE as timestamp,",
				"          VALID_END_DATE as timestamp,",
				"          BATCH_ID as long,",
				"          UNIQUE_IDENTIFIER as string,",
				"          DELETED_YN as string,",
				"          BPAM_LAST_MODIFIED_DATE as timestamp,",
				"          BPAM_LAST_CREATED_DATE as timestamp,",
				"          SOURCE_KEY as string,",
				"          DATA_HASH as binary",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> coverageCodeStaging",
				"pkey sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> ssCoverCodPkeyCache"
			]
		}
	}
}
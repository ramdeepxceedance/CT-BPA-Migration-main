{
	"name": "df_target_premiumComparison_policy",
	"properties": {
		"folder": {
			"name": "utility"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_target_quoteInfo",
						"type": "DatasetReference"
					},
					"name": "targetQuoteInfo"
				},
				{
					"dataset": {
						"referenceName": "ds_source_Fact_Coverage_Premium",
						"type": "DatasetReference"
					},
					"name": "sourcePremium"
				},
				{
					"dataset": {
						"referenceName": "ECMBPA_COV_MAP",
						"type": "DatasetReference"
					},
					"name": "coverageSectionLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_target_rater_report",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "parse1"
				},
				{
					"name": "select1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "filter1"
				},
				{
					"name": "coveragePremiumLookup"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select4"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select5"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "MapDrifted2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     policyPrefix as string,",
				"     policies as string[]",
				"}",
				"source(output(",
				"          policy_number as string,",
				"          policy_id as integer,",
				"          policy_reference as string,",
				"          quote_number as string,",
				"          quote as string,",
				"          status as string,",
				"          response as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from quote_info where status='success' \"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy_number in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> targetQuoteInfo",
				"source(output(",
				"          Policy as string,",
				"          Policy_Sequence as string,",
				"          PolicyPrefix as string,",
				"          ARICLOB as string,",
				"          ARICGroupCode as string,",
				"          Description as string,",
				"          Product as string,",
				"          ARICCoverageCode as string,",
				"          ARICCoverageDescription as string,",
				"          PrimaryPremiumStateCode as string,",
				"          LocationNumber as string,",
				"          LocationUnitNumber as string,",
				"          ARICCoverageSequence as string,",
				"          CoveragePart as string,",
				"          CoverageAddDate as timestamp,",
				"          CoverageDescription as string,",
				"          Limit1 as decimal(38,0),",
				"          Limit2 as decimal(38,0),",
				"          PremiumAmount as decimal(38,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from Fact_Coverage_Premium where PolicyPrefix = '{$policyPrefix}'\"+iif(size($policies) >0&& size($policies) ==1&&$policies[1] =='','','and policy in ('+dropLeft(toString(reduce($policies, \"'\", #acc + \",'\" + #item +\"'\", #result)), 2)+')')),",
				"     format: 'query') ~> sourcePremium",
				"source(output(",
				"          COV_SEQ as string,",
				"          BPA_SECTION_CODE as string,",
				"          COVERAGE_CODE as string,",
				"          COVERAGE_CODE_DES as string,",
				"          BPA_COVERAGE_CODES as string,",
				"          BPA_COVERAGES as string,",
				"          COVERAGES as string,",
				"          BPA_PRODUCT_CODE as string,",
				"          SI_NO as string,",
				"          id as long,",
				"          BPA_SEC_NAME as string,",
				"          SOURCE_PRODUCT_CODE as string,",
				"          bpa_coverage_group as string,",
				"          bpa_coverage_level as string,",
				"          bpa_coverage_type as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> coverageSectionLookup",
				"targetQuoteInfo parse(quote_json = response ? (agent as (agencyCode as string,",
				"          agencyTier as string,",
				"          agencyType as string,",
				"          id as string,",
				"          isCancelled as string,",
				"          maintenanceAgency as string,",
				"          number as string,",
				"          parentEntityId as string,",
				"          parentEntityTypeName as string,",
				"          partyCode as string,",
				"          partyIdentifiers as string[],",
				"          partyName as string,",
				"          typeCode as string),",
				"          amountItem as (appliesToCode as string, currencyCode as string, description as string, editableOnTransaction as string, isAggregate as string, isMtaImpacted as string, isRefundable as string, levelCode as string, maxValue as string, minValue as string, originalAmount as string, pricedAmount as string, pricedValue as string, sequenceNumber as string, subTypeCode as string, typeCode as string, value as string, valueType as string)[],",
				"          businessPurposeType as string,",
				"          businessPurposeTypeCode as string,",
				"          carrierProcessingType as string,",
				"          claim as string[],",
				"          clientParticipant as (effectiveDate as string, expirationDate as string, extendedAttributes as (name as string)[], id as string, isCancelled as string, originalPartyName as string, parentEntityId as string, parentEntityTypeName as string, partyCode as string, partyName as string, professionalRole as string, questionAnswer as string[], roleCode as string, subRoleCode as string)[],",
				"          companyProductCode as string,",
				"          coverage as string[],",
				"          coverageGroup as string[],",
				"          createdBy as string,",
				"          createdDate as string,",
				"          currencyCode as string,",
				"          desiredEffectiveDate as string,",
				"          endorsement as (amountItem as (appliesToCode as string, currencyCode as string, editableOnTransaction as string, levelCode as string, originalAmount as string, pricedAmount as string, typeCode as string, valueType as string), clauses as string[], coverageCode as string, editionNumber as string, effectiveDate as string, endorsedPolicyReference as string, endorsementCode as string, endorsementNumber as string, endorsementType as string, expirationDate as string, extendedAttributes as string[], formCode as string, id as string, insurableObjectId as string, isCancelled as string, questionAnswer as string[], reasonCodes as string[], sectionCode as string, sourcePolicyReference as string)[],",
				"          extendedAttributes as (name as string, value as string)[],",
				"          firmRatingTrackingNumber as string,",
				"          forms as string[],",
				"          groupCode as string,",
				"          id as string,",
				"          initialRequestDate as string,",
				"          iterationNumber as string,",
				"          lineofBusinessCode as string,",
				"          location as string[],",
				"          majorVersion as string,",
				"          mgaParticipant as string[],",
				"          minorVersion as string,",
				"          operatingCompanyCode as string,",
				"          originalBusinessPurposeType as string,",
				"          originalBusinessPurposeTypeCode as string,",
				"          parentEntityId as string,",
				"          parentEntityTypeName as string,",
				"          policyEffectiveDate as string,",
				"          policyExpirationDate as string,",
				"          policyStage as string,",
				"          policyStatus as string,",
				"          policyStatusCodeDisplayName as string,",
				"          policyTerm as string,",
				"          preparedDate as string,",
				"          priorPolicy as string[],",
				"          productVersion as string,",
				"          questionAnswer as (answerCode as string, extendedAttributes as string[], id as string, isCancelled as string, parentEntityId as string, parentEntityTypeName as string, questionCode as string, questionText as string, value as string)[],",
				"          quoteNumber as string,",
				"          ratedIndicator as string,",
				"          reasons as string[],",
				"          referenceNumber as string,",
				"          sanctionCheckInfo as string[],",
				"          section as (amountItem as (appliesToCode as string, currencyCode as string, description as string, editableOnTransaction as string, isAggregate as string, isMtaImpacted as string, isRefundable as string, levelCode as string, maxValue as string, minValue as string, originalAmount as string, pricedAmount as string, pricedValue as string, sequenceNumber as string, subTypeCode as string, typeCode as string, value as string, valueType as string)[], carrierParticipant as string[], commissionAmountBasis as string, coverTypeCode as string, coverage as (amountItem as string[], appliesToCode as string, appliesToLevel as string, deductible as (currencyCode as string, id as string, name as string, parentEntityId as string, parentEntityTypeName as string, sequenceNumber as string, typeCode as string, value as string, valueType as string)[], effectiveDate as string, expirationDate as string, extendedAttributes as string[], fullPremium as string, id as string, isCancelled as string, limit as (currencyCode as string, id as string, name as string, parentEntityId as string, parentEntityTypeName as string, sequenceNumber as string, typeCode as string, value as string, valueType as string)[], option as string[], parentEntityId as string, parentEntityTypeName as string, sequenceNumber as string, tax as string[], typeCode as string)[], coverageGroup as string[], declinedIndicator as string, effectiveDate as string, expirationDate as string, extendedAttributes as string[], feeAmountBasis as string, id as string, insurableObject as (businessKey as string, extendedAttributes as (name as string, value as string)[], id as string, isCancelled as string, parentEntityId as string, parentEntityTypeName as string, sequenceNumber as string, typeCode as string)[], insurableObjectParticipant as (effectiveDate as string, expirationDate as string, extendedAttributes as string[], id as string, insurableObjectId as string, isCancelled as string, parentEntityId as string, parentEntityTypeName as string)[], isCancelled as string, isSharedCarrier as string, lineOfBusinessCode as string, location as string[], mappedLocations as string[], parentEntityId as string, parentEntityTypeName as string, premiumAmountBasis as string, pricedIndicator as string, pricingFactor as string[], primaryRatingState as string, questionAnswer as (answerCode as string, appliesToCode as string, extendedAttributes as string[], id as string, isCancelled as string, parentEntityId as string, parentEntityTypeName as string, questionCode as string, questionText as string, value as string)[], sectionItem as string[], sequenceNumber as string, subjectivity as string[], tax as string[], taxAmountBasis as string, taxJurisdiction as string[], triaRate as string, underwritingYear as string)[],",
				"          sectionWiseLocationAllocation as string,",
				"          sequenceNumber as string,",
				"          statusCode as string,",
				"          statusCodeDisplayName as string,",
				"          submissionCreatedBy as string,",
				"          submissionCreationDate as string,",
				"          tax as string[],",
				"          trackingNumber as string,",
				"          typeCode as string,",
				"          underlyingPolicies as string[],",
				"          underwriterDecisionInfo as string[],",
				"          validUntilDate as string),",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> parse1",
				"parse1 select(mapColumn(",
				"          policy_number,",
				"          policy_id,",
				"          policy_reference,",
				"          quote_number,",
				"          sections = quote_json.section,",
				"          policy_reference",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 foldDown(unrollMultiple(sections,sections.amountItem,every(match(name=='coverage'))),",
				"     mapColumn(",
				"          policy_number,",
				"          coverage = sections.coverage,",
				"          sectionCode = sections.coverTypeCode,",
				"          premiumLevelCode = sections.amountItem.levelCode,",
				"          premiumTypeCode = sections.amountItem.typeCode,",
				"          premiumAppliesToCode = sections.amountItem.appliesToCode,",
				"          premiumAmount = sections.amountItem.originalAmount,",
				"          stage_policy_number = policy_id,",
				"          policy_reference",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"derivedColumn4 select(mapColumn(",
				"          policy_number,",
				"          sectionCode,",
				"          premiumLevelCode,",
				"          premiumTypeCode,",
				"          premiumAppliesToCode,",
				"          targetPremiumAmount = premiumAmount,",
				"          stage_policy_number,",
				"          transaction_type,",
				"          target_coverage_code,",
				"          product_code,",
				"          policy_reference",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"sourcePremium select(mapColumn(",
				"          Policy,",
				"          PolicyPrefix,",
				"          Description,",
				"          ARICCoverageCode,",
				"          ARICCoverageDescription,",
				"          LocationNumber,",
				"          LocationUnitNumber,",
				"          ARICCoverageSequence,",
				"          CoverageDescription,",
				"          Limit1,",
				"          Limit2,",
				"          SourcePremiumAmount = PremiumAmount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select2 filter(premiumLevelCode == 'policy' && premiumTypeCode == 'tack_premium' && sectionCode == 'SEC000') ~> filter1",
				"select3, filter2 join(ARICCoverageCode == COVERAGE_CODE",
				"     && ARICCoverageSequence == COV_SEQ,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> coveragePremiumLookup",
				"coveragePremiumLookup derive(source_risk_id = LocationNumber+'-'+LocationUnitNumber,",
				"          source_coverage_code = toString(ARICCoverageCode)+'-'+toString(ARICCoverageSequence)) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          source_policy_number = Policy,",
				"          Description,",
				"          ARICCoverageDescription,",
				"          CoverageDescription,",
				"          ARICCoverageCode,",
				"          ARICCoverageSequence,",
				"          LocationNumber,",
				"          LocationUnitNumber,",
				"          SourcePremiumAmount,",
				"          COVERAGE_NAME = COVERAGES,",
				"          BPA_COVERAGES,",
				"          BPA_SEC_NAME,",
				"          BPA_SECTION_CODE,",
				"          BPA_COVERAGE_CODES,",
				"          source_coverage_code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"filter1, select4 lookup(policy_number == source_policy_number",
				"     && sectionCode == BPA_SECTION_CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"MapDrifted2 select(mapColumn(",
				"          target_section = sectionCode,",
				"          premiumLevelCode,",
				"          premiumTypeCode,",
				"          target_premium = targetPremiumAmount,",
				"          target_coverage_code,",
				"          source_policy_number,",
				"          Description,",
				"          ARICCoverageDescription,",
				"          source_coverage_name = CoverageDescription,",
				"          ARICCoverageCode,",
				"          ARICCoverageSequence,",
				"          LocationNumber,",
				"          LocationUnitNumber,",
				"          source_premium = SourcePremiumAmount,",
				"          COVERAGE_NAME,",
				"          target_coverage_name = BPA_COVERAGES,",
				"          target_section_name = BPA_SEC_NAME,",
				"          BPA_SECTION_CODE,",
				"          BPA_COVERAGE_CODES,",
				"          target_coverage_code,",
				"          stage_policy_number,",
				"          product_code,",
				"          transaction_type,",
				"          source_coverage_code,",
				"          target_policy_number = policy_reference",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"flatten1 derive(coverage = coverage,",
				"          sectionCode = toString(byName('sectionCode')),",
				"          premiumLevelCode = toString(byName('premiumLevelCode')),",
				"          premiumTypeCode = toString(byName('premiumTypeCode')),",
				"          premiumAppliesToCode = toString(byName('premiumAppliesToCode')),",
				"          premiumAmount = toString(byName('premiumAmount'))) ~> MapDrifted1",
				"MapDrifted1 derive(target_coverage_code = coverage[1].typeCode,",
				"          transaction_type = 'premium',",
				"          product_code = $policyPrefix) ~> derivedColumn4",
				"lookup1 derive({ageInYears } = trim(toString(byName('ageInYears '))),",
				"          {horseBreed } = trim(toString(byName('horseBreed '))),",
				"          {horseName } = trim(toString(byName('horseName '))),",
				"          {horseSex } = trim(toString(byName('horseSex '))),",
				"          {purchaseDate } = trim(toString(byName('purchaseDate '))),",
				"          {purchasePrice } = trim(toString(byName('purchasePrice '))),",
				"          {requestedLimit } = trim(toString(byName('requestedLimit '))),",
				"          {use } = trim(toString(byName('use '))),",
				"          {yearBorn } = trim(toString(byName('yearBorn ')))) ~> MapDrifted2",
				"coverageSectionLookup filter(bpa_coverage_level == 'P' && BPA_PRODUCT_CODE == $policyPrefix) ~> filter2",
				"select5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          source_policy_number as string,",
				"          stage_policy_number as string,",
				"          target_policy_number as string,",
				"          transaction_type as string,",
				"          source_coverage_code as string,",
				"          target_coverage_code as string,",
				"          source_insurable_object as string,",
				"          target_insurable_object as string,",
				"          target_section as string,",
				"          source_premium as string,",
				"          target_premium as string,",
				"          batch_id as integer,",
				"          bpa_tenant_id as string,",
				"          product_code as string,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          horse_breed as string,",
				"          horse_sex as string,",
				"          use as string,",
				"          age_in_years as string,",
				"          year_born as string,",
				"          purchase_date as string,",
				"          purchase_price as string,",
				"          requested_limit as string,",
				"          location_state as string,",
				"          target_section_name as string,",
				"          target_coverage_name as string,",
				"          source_coverage_name as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}